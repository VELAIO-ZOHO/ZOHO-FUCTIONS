
// ======================== TESTING ========================== //
uriCreateRequisition = "https://thunder.docm.co/TESTAPI/EficaciaCD/WebAPI/Element/Store";
uriAccessTokenDocMngr = "https://wsintegracion.azurewebsites.net/oauth/token";
jobOpeningId = "594922000006013101";
uriDocManager = "https://wsintegracion.azurewebsites.net/webservice/DocManager/storeFully";
log_doc_mng = "1";
// ======================== PRODUCCIÓN ========================== //
docManagerConfiguration = "594922000001289498";
uriAccountExecutive = "https://recruit.zoho.com/recruit/private/json/CustomModule16/getRecordById?scope=recruitapi&version=2";
uriLog = "https://recruit.zoho.com/recruit/private/xml/CustomModule6/addRecords?scope=recruitapi&newFormat=1&duplicateCheck=2&version=4";
uriUpdateJobOpening = "https://recruit.zoho.com/recruit/private/xml/JobOpenings/updateRecords?scope=recruitapi&version=2&id=" + jobOpeningId;
uriGetAccessTokenFromZoho = "https://recruit.zoho.com/recruit/private/json/CustomModule15/getRecordById?scope=recruitapi&version=2&id=" + docManagerConfiguration;
uriUpdateAccessTokenFromZoho = "https://recruit.zoho.com/recruit/private/xml/CustomModule15/updateRecords?scope=recruitapi&version=2&id=" + docManagerConfiguration + "&wfTrigger=true";
try 
{
	/*----START: QUERY THE ACCES TOKEN----*/
	/*START: SEARCHING THE CANDIDATES PROCESSED*/
	headers = Map();
	headers.put("content-type","application/x-www-form-urlencoded");
	//tokenRocord = getUrl(uriGetAccessTokenFromZoho,headers);
	tokenRocord = invokeurl
	[
		url :uriGetAccessTokenFromZoho
		type :GET
		connection:"oauthzrecruit"
	];
	tokenRocordResult = tokenRocord.getJSON("response").getJSON("result");
	existTokenRocord = !isNull(tokenRocordResult);
	if(existTokenRocord)
	{
		recordsFL = tokenRocordResult.getJSON("CustomModule15").getJSON("row").getJSON("FL");
		accessTokenUpdateAt = "";
		token = "";
		userDocMngr = "";
		Authorization = "";
		passwordDocMngr = "";
		currentDate = now;
		//Getting the fields of the records
		for each  record in recordsFL
		{
			val = record.getJSON("val");
			if(val == 'Modified Time')
			{
				accessTokenUpdateAt = record.getJSON("content");
			}
			if(val == 'Access Token Doc Manager')
			{
				token = record.getJSON("content");
			}
			if(val == 'usuario Doc Manager')
			{
				userDocMngr = record.getJSON("content");
			}
			if(val == 'contraseña Doc Manager')
			{
				passwordDocMngr = record.getJSON("content");
			}
			if(val == 'Authorization')
			{
				Authorization = record.getJSON("content");
			}
		}
		tokenUpdateAtHours = accessTokenUpdateAt.hoursBetween(currentDate);
		//Checking if the token is invalid
		if(tokenUpdateAtHours > 23)
		{
			/*----START: GENERATE ACCES TOKEN----*/
			postData = "username=" + userDocMngr + "&password=" + passwordDocMngr + "&grant_type=password";
			headersAccesToken = Map();
			headersAccesToken.put("Content-Type","application/x-www-form-urlencoded");
			headersAccesToken.put("Authorization","Basic " + Authorization);
			//responseAccesToken = postUrl(uriAccessTokenDocMngr,postData,headersAccesToken,false);
			responseAccesToken = invokeurl
			[
				url :uriAccessTokenDocMngr
				type :POST
				parameters:postData
				headers:headersAccesToken
				detailed:true
			];
			token = responseAccesToken.getJSON("responseText").getJSON("access_token");
			/*----END: GENERATE ACCES TOKEN----*/
			/*----START: UPDATING ACCES TOKEN----*/
			xmlData = 'xmlData=<CustomModule15><row no="1"><FL val="Access Token Doc Manager"><![CDATA[' + token + ']]></FL></row></CustomModule15>';
			headers = Map();
			headers.put("content-type","application/x-www-form-urlencoded");
			logResponse = Map();
			//logResponse = postUrl(uriUpdateAccessTokenFromZoho,xmlData,headers,false);
			logResponse = invokeurl
			[
				url :uriUpdateAccessTokenFromZoho
				type :POST
				parameters:xmlData
				headers:headers
				connection:"oauthzrecruit"
			];
			/*----END: UPDATING ACCES TOKEN----*/
		}
	}
	/*----END: QUERY THE ACCES TOKEN----*/
	jobResponse = zoho.recruit.getRecordById("JobOpenings",jobOpeningId);
	companyName = "";
	requestArea = "¿Requerimiento para un cliente?";
	jobTitle = "";
	clientName = "";
	clientId = "";
	zone = "";
	numberOfPositions = "";
	dateOfAdmission = "";
	analystDocument = "";
	accountExecutive = "";
	// START: Requisicion Id
	Idrequisicion = jobResponse.getJSON("ID de la requisición");
	if(isNull(Idrequisicion))
	{
		Idrequisicion = "";
	}
	requisicionObj = Map();
	requisicionObj.put("Id","84");
	requisicionObj.put("Value",Idrequisicion);
	// END: Requisicion Id
	// START: Company Name
	companyName = jobResponse.getJSON("Empresa");
	if(companyName == "Eficacia")
	{
		companyName = "EFICACIA";
	}
	if(companyName == "Ezenza")
	{
		companyName = "EZENZA";
	}
	if(companyName == "Extras")
	{
		companyName = "EXTRAS";
	}
	companyNameObj = Map();
	companyNameObj.put("Id","1");
	companyNameObj.put("Value",companyName);
	// END: Company Name
	// START: Resquested area
	requestArea = jobResponse.getJSON("Área Solicitante");
	requestAreaValue = 5;
	if(!isNull(requestArea))
	{
		if(requestArea == "Unidad de Negocio")
		{
			requestAreaValue = 4;
		}
	}
	requestAreaObj = Map();
	requestAreaObj.put("Id","2");
	requestAreaObj.put("Value",requestAreaValue);
	// END: Resquested area			
	// START: Client Name 
	clientName = jobResponse.getJSON("Client Name");
	if(isNull(clientName))
	{
		clientName = "";
	}
	clientNameObj = Map();
	clientNameObj.put("Id","3");
	clientNameObj.put("Value",clientName);
	// END: Client Name 				
	// START: Client NIT 
	clientId = jobResponse.getJSON("CLIENTID");
	if(!isNull(clientId))
	{
		clientResponse = zoho.recruit.getRecordById("Clients",clientId);
		nit = clientResponse.getJSON("NIT");
		if(isNull(nit))
		{
			nit = "";
		}
		nitObj = Map();
		nitObj.put("Id","4");
		nitObj.put("Value",nit);
	}
	// END: Client NIT 
	//START: ZONE
	zone = jobResponse.getJSON("Zona de contratación");
	if(isNull(zone))
	{
		zone = "";
	}
	zoneObj = Map();
	zoneObj.put("Id","5");
	zoneObj.put("Value",zone);
	//END: ZONE
	// START: Job Title
	jobTitle = jobResponse.getJSON("Posting Title");
	if(isNull(jobTitle))
	{
		jobTitle = "";
	}
	jobTitleObj = Map();
	jobTitleObj.put("Id","6");
	jobTitleObj.put("Value",jobTitle);
	// END: Job Title
	// START: Number of positions
	numberOfPositions = jobResponse.getJSON("Number of Positions");
	if(isNull(numberOfPositions))
	{
		numberOfPositions = "";
	}
	numberOfPositionsObj = Map();
	numberOfPositionsObj.put("Id","7");
	numberOfPositionsObj.put("Value",numberOfPositions);
	// END: Number of positions
	//START: Admision date
	dateOfAdmissionTemp = jobResponse.getJSON("Fecha de Ingreso");
	dateOfAdmission = null;
	if(!isNull(dateOfAdmissionTemp))
	{
		dateOfAdmissionTemp = dateOfAdmissionTemp.toDate();
		dateOfAdmission = dateOfAdmissionTemp.getMonth() + "/" + dateOfAdmissionTemp.getDay() + "/" + dateOfAdmissionTemp.getYear();
	}
	if(isNull(dateOfAdmission))
	{
		dateOfAdmission = "";
	}
	dateOfAdmissionObj = Map();
	dateOfAdmissionObj.put("Id","8");
	dateOfAdmissionObj.put("Value",dateOfAdmission);
	//END: Admision date
	//START: analystDocument
	analystDocument = jobResponse.getJSON("Documento analista de selección responsable");
	if(isNull(analystDocument))
	{
		analystDocument = "";
	}
	analystDocumentObj = Map();
	analystDocumentObj.put("Id","132");
	analystDocumentObj.put("Value",analystDocument);
	//END: analystDocument
	/*---- START: ACCOUNT EXECUTIVE----*/
	accountExecutiveId = jobResponse.getJSON("Responsable de la cuenta/Ejecutivo de cuenta_ID");
	accountExecutive = "";
	if(!isNull(accountExecutiveId))
	{
		//accountExecutiveResponse = getUrl(uriAccountExecutive + "&id=" + accountExecutiveId);
		accountExecutiveResponse = invokeurl
		[
			url :uriAccountExecutive + "&id=" + accountExecutiveId
			type :GET
			connection:"oauthzrecruit"
		];
		fields = accountExecutiveResponse.getJSON("response").getJSON("result").getJSON("CustomModule16").getJSON("row").getJSON("FL");
		for each  field in fields
		{
			fieldRecord = field.getJSON("val");
			if(fieldRecord == "Documento de identidad")
			{
				accountExecutive = field.getJSON("content");
			}
		}
	}
	accountExecutiveObj = Map();
	accountExecutiveObj.put("Id","180");
	accountExecutiveObj.put("Value",accountExecutive);
	/*---- END: ACCOUNT EXECUTIVE----*/
	//START: auxiliaryDocument
	auxiliaryDocument = jobResponse.getJSON("Auxiliar de contratación");
	if(!isNull(auxiliaryDocument))
	{
		auxiliaryDocument = auxiliaryDocument.toList("(");
		if(auxiliaryDocument.size() == 2)
		{
			auxiliaryDocument = auxiliaryDocument.get(1);
			auxiliaryDocument = auxiliaryDocument.remove(")");
		}
		else
		{
			auxiliaryDocument = null;
		}
	}
	if(isNull(auxiliaryDocument))
	{
		auxiliaryDocument = "";
	}
	auxiliaryDocumentObj = Map();
	auxiliaryDocumentObj.put("Id","181");
	auxiliaryDocumentObj.put("Value",auxiliaryDocument);
	//END: auxiliaryDocument
	// START: EDICATION DETAILS
	maxLevelStudy = jobResponse.getJSON("Nivel de estudios");
	if(!isNull(maxLevelStudy))
	{
		if(maxLevelStudy == "Especialización" || maxLevelStudy == "Pos doctorado" || maxLevelStudy == "Doctorado")
		{
			maxLevelStudy = 24;
		}
		if(maxLevelStudy == "Maestría")
		{
			maxLevelStudy = 25;
		}
		if(maxLevelStudy == "Profesional" || maxLevelStudy == "Pregrado")
		{
			maxLevelStudy = 23;
		}
		if(maxLevelStudy == "Tecnólogo")
		{
			maxLevelStudy = 22;
		}
		if(maxLevelStudy == 'Técnico')
		{
			maxLevelStudy = 21;
		}
		if(maxLevelStudy == "Bachillerato")
		{
			maxLevelStudy = 20;
		}
		if(maxLevelStudy == "Primaria")
		{
			maxLevelStudy = 19;
		}
	}
	else
	{
		maxLevelStudy = 18;
	}
	maxLevelStudyObj = Map();
	maxLevelStudyObj.put("Id","94");
	maxLevelStudyObj.put("Value",maxLevelStudy);
	// END: EDICATION DETAILS	
	// START: ACADEMIY EVIDENCE 
	academyEvidence = jobResponse.getJSON("Evidencia de la formación academica");
	academyEvidenceValue = "";
	academyEvidence_7 = "";
	if(!isNull(academyEvidence))
	{
		academyEvidence_1 = replaceAll(academyEvidence,"Tarjeta profesional",546);
		academyEvidence_2 = replaceAll(academyEvidence_1,"Certificado de estudios",547);
		academyEvidence_3 = replaceAll(academyEvidence_2,"Certificado de educación técnica",548);
		academyEvidence_4 = replaceAll(academyEvidence_3,"Certificado de educación tecnológica",549);
		academyEvidence_5 = replaceAll(academyEvidence_4,"Certificado de posgrados",550);
		academyEvidence_6 = replaceAll(academyEvidence_5,"Diploma de bachiller",551);
		academyEvidence_7 = replaceAll(academyEvidence_6,"Diploma profesional",593);
	}
	academyEvidenceObj = Map();
	academyEvidenceObj.put("Id","118");
	academyEvidenceObj.put("Value",academyEvidence_7);
	// END: ACADEMIY EVIDENCE 	
	// START: ACADEMIY EVIDENCE 
	certificates = jobResponse.getJSON("Cursos/certificaciones/diplomados/otros");
	certificatesValue = "";
	certificates_8 = "";
	if(!isNull(certificates))
	{
		certificates_1 = replaceAll(certificates,"Certificado manipulación de alimentos",512);
		certificates_2 = replaceAll(certificates_1,"Certificado trabajo en alturas",513);
		certificates_3 = replaceAll(certificates_2,"Licencia de conducción",514);
		certificates_4 = replaceAll(certificates_3,"Certificación operadores montacargas y/o pantografo",536);
		certificates_5 = replaceAll(certificates_4,"Carnet de vacunas",537);
		certificates_6 = replaceAll(certificates_5,"Certificación operadores grúa",538);
		certificates_7 = replaceAll(certificates_6,"Curso de seguridad vial y tráfico",539);
		certificates_8 = replaceAll(certificates_7,"No Aplica",592);
	}
	certificatesObj = Map();
	certificatesObj.put("Id","93");
	certificatesObj.put("Value",certificates_8);
	// END: ACADEMIY EVIDENCE 		
	requiresEducation = Map();
	requiresEducation.put("Id","127");
	requiresEducation.put("Value","564");
	/*-----START: BUILD DATA TO SEND----*/
	elementInfo = Map();
	elementInfo.put("ETId",1);
	elementInfo.put("ReplaceableMetaDataIds",{84,1,2,3,4,5,6,7,8,132,180,181,127,94,118,93});
	elementInfo.put("KeyMetaDataId",84);
	elementInfo.put("Values",{requisicionObj,companyNameObj,requestAreaObj,clientNameObj,nitObj,zoneObj,jobTitleObj,numberOfPositionsObj,dateOfAdmissionObj,analystDocumentObj,accountExecutiveObj,auxiliaryDocumentObj,requiresEducation,maxLevelStudyObj,academyEvidenceObj,certificatesObj});
	body = Map();
	body.put("ElementInfo",elementInfo);
	params = Map();
	params.put('IdDocManager',"CONTRATACION_DIGITAL");
	params.put('Body',body);
	params.put('Transitions',{46});
	/*-----START: SEND DOCMANAGER REQUEST----*/
	headers = Map();
	response = Map();
	headers.put("Content-Type","application/json");
	headers.put("Authorization","Bearer " + token);
	response = postUrl(uriDocManager,params.toString(),headers,false);
	/*-----END: SEND DOCMANAGER REQUEST----*/
	/*-----START: LOG ----*/
	responseText = response.getJSON("responseText");
	responseText = responseText.toString();
	responseCode = response.getJSON("responseCode");
	if(log_doc_mng == "1")
	{
		xmlData = 'xmlData=<CustomModule6><row no="1"><FL val="Cod">' + responseCode + '</FL><FL val="Response">' + responseText + '</FL><FL val="Msg"><![CDATA[send_docmng_requisicion]]></FL><FL val="Integration"><![CDATA[Doc Manager]]></FL><FL val="Method">https://wsintegracion.azurewebsites.net/webservice/DocManager/storeFully</FL><FL val="Params">' + params.toString() + '</FL></row></CustomModule6>';
		headers = Map();
		headers.put("content-type","application/x-www-form-urlencoded");
		logResponse = Map();
		//logResponse = postUrl(uriLog,xmlData,headers,false);
		logResponse = invokeurl
		[
			url :uriLog
			type :POST
			parameters:xmlData.toString()
			headers:headers
			detailed:true
			connection:"oauthzrecruit"
		];
		info logResponse;
	}
	/*-----END: LOG----*/
	/*-----START: SAVE THE IdDocmanager IN OFERTA ----*/
	IdDocmanager = responseText.getJSON("data");
	xmlData = 'xmlData=<JobOpenings><row no="1"><FL val="Id docmanager"><![CDATA[' + IdDocmanager.toString() + ']]></FL></row></JobOpenings>';
	headers = Map();
	headers.put("content-type","application/x-www-form-urlencoded");
	updateJob = Map();
	//updateJob = postUrl(uriUpdateJobOpening,xmlData,headers,false);
	updateJob = invokeurl
	[
		url :uriUpdateJobOpening
		type :POST
		parameters:xmlData.toString()
		headers:headers
		detailed:true
		connection:"oauthzrecruit"
	];
	info updateJob;
	/*-----END: SAVE THE IdDocmanager IN OFERTA ----*/
}
 catch (e)
{	
  info e.toString();
  xmlData = 'xmlData=<CustomModule6><row no="1"><FL val="Cod"></FL><FL val="Response">' + e.toString() + '</FL><FL val="Msg"><![CDATA[send_docmng_requisicion]]></FL><FL val="Integration"><![CDATA[Doc Manager]]></FL><FL val="Method">https://wsintegracion.azurewebsites.net/webservice/DocManager/storeFully</FL><FL val="Params"></FL></row></CustomModule6>';
	headers = Map();
	headers.put("content-type","application/x-www-form-urlencoded");
	logResponse = Map();
	//logResponse = postUrl(uriLog,xmlData,headers,false);
	logResponse = invokeurl
	[
		url :uriLog
		type :POST
		parameters:xmlData
		headers:headers
		detailed:true
		connection:"oauthzrecruit"
	];
}