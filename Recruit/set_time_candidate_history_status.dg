  /// Config APIs
  moduleName = "CustomModule3";
  headers = Map();
  headers.put("content-type","application/x-www-form-urlencoded");
  /// URIs
  uriGetRecords = 'https://recruit.zoho.com/recruit/private/json/' + moduleName + '/getRecords?scope=recruitapi&version=2&newFormat=2&sortColumnString=' + moduleName + '+Name&fromIndex=0&toIndex=50';
  uriGetSearchRecords = "https://recruit.zoho.com/recruit/private/json/" + moduleName + "/getSearchRecords?scope=recruitapi&version=2&newFormat=2&selectColumns=All&fromIndex=0&toIndex=100";
  /// Listas de categorías
  statusNuevo = {'Nuevo'};
  statusReclutamiento = {'Asociado','Activar flujo de trabajo','En validación de BD externas'};
  statusSeleccion = {'Preselección','Solicita información adicional/Documentos','Programar entrevista de selección','En entrevista de selección','En Prueba de selección','Entrevista de selección programada','Interview to be scheduled','Interview-Scheduled'};
  statusNegocio = {'Programar entrevista (negocio)','Entrevista negocio programada','En prueba técnica (Negocio)'};
  statusCliente = {'Enviar a revisión del cliente','En revisión del cliente masivo','En revisión del cliente individual','Programar entrevista (Cliente)','Entrevista cliente programada','Prueba técnica (cliente)','Aprobado por el cliente','Rechazado por el cliente'};
  statusContratacion = {'En estudio de seguridad','Semillero para contratar','Seleccionado en contratación','En exámenes médicos','Descartado en contratación','En contratación','Contratado'};
  statusDescartado = {'Descalificado','Descartado','Desasociado'};
  /// Busca todos los registros en Historial de estados
  recordsHistoryResp = Map();
  recordsHistoryResp = invokeurl
  [
    url :uriGetRecords
    type :POST
    parameters:Map()
    headers:headers
    connection:"oauthzrecruit"
  ];
  // info "recordsHistoryResp:";
  // info recordsHistoryResp;
  // obtenemos la lista con los registros
  data = recordsHistoryResp.getJSON('response').getJSON('result').getJSON(moduleName).getJSON('row');
  //info "data: " + data.size();
  directory = Map();
  /// Para cada registro crearemos un directorio sólo con valores de Candidato y oferta únicos
  /// Para luego buscar los registros de cada candidato y realizar la operación de rellenar datos
  for each  item in data
  {
    listFL = List();
    listFL = item.getJSON('FL');

    //variables de registro directorio
    item_candidateId = "";
    item_candidateName = "";
    item_jobId = "";
    item_jobName = "";

    for each fl in listFL
    {
      if(fl.getJSON("val") == "Candidato_ID")
      {
        item_candidateId = fl.getJSON("content");
      }
      if(fl.getJSON("val") == "Candidato")
      {
        item_candidateName = fl.getJSON("content");
      }
      if(fl.getJSON("val") == "Oferta_ID")
      {
        item_jobId = fl.getJSON("content");
      }
      if(fl.getJSON("val") == "Oferta")
      {
        item_jobName = fl.getJSON("content");
      }
    }
    // La llave del directorio será el candidatoId y ofertaId
    recordName = item_candidateId + "_" + item_jobId;
    // Si no existe el registro en el directorio, lo agrega
    if(!directory.containKey(recordName))
    {
      new_candidateId = {'id':item_candidateId};
      new_candidateName = {'nombre':item_candidateName};
      new_jobId = {'ofertaId':item_jobId};
      new_jobName = {'oferta':item_jobName};
      /**
        * EJEMPLO:
        * "594922000005285003_594922000005227079": [
        *   { "id": "594922000005285003" },
        *   { "nombre": "Mario Angel Heredia Durango" },
        *   { "ofertaId": "594922000005227079" },
        *   { "oferta": "SUPERVISOR" }
        * ]
        */
      directory.put(recordName,{new_candidateId,new_candidateName,new_jobId,new_jobName});
    }
  }
  //info directorio;
  /// Directorio con valores únicos creado *********
  /// INICIA recorrido de directorio ***************
  breakCounter = 0;
  // info "directorio: " + directory;
  for each dir_item in directory
  {
    /// tomamos ids y nombres de los elementos
    dir_candidateId = dir_item.get(0).getJSON("id");
    dir_candidateName = dir_item.get(1).getJSON("nombre");
    dir_candidateJobId = dir_item.get(2).getJSON("ofertaId");
    /// Buscamos todos los registros de ese candidato
    queryParams = "searchCondition=(Candidato|=|" + dir_candidateName + ")";
    // queryParams = "searchCondition=(Candidato|=|wendy georgeth Mora ibañez)";
    candidatesSearchResp = Map();
    candidatesSearchResp = invokeurl
    [
      url :uriGetSearchRecords
      type :POST
      parameters:queryParams
      headers:headers
      connection:"oauthzrecruit"
    ];
    //info candidatesSearchResp;
    /// Obtenemos todos los registros de historial del candidato
    candidateHistoriesData = candidatesSearchResp.getJSON('response').getJSON('result').getJSON(moduleName).getJSON('row');
    haveMultipleHistories = !isNull(candidateHistoriesData.get(0));
    if(haveMultipleHistories)
    {
      // tomar id autoincrement y crear lista de ordenamiento
      listOfIds = List();
      for each historyRecord in candidateHistoriesData
      {
        historyRecordListFL = historyRecord.getJSON("FL");
        historyRecordId = "";
        for each item_fl in historyRecordListFL
        {
          if(item_fl.getJSON("val") == moduleName + " Name")
          {
            historyRecordId = item_fl.getJSON("content");
          }
        }
        listOfIds.add(historyRecordId.toNumber());
      }
      // FIN Lista de ids en orden de llegada (desorden) {843, 825, 852}
      // INICIA Ordenamiento de ids en nueva lista {825, 843, 852}
      orderedListOfIds = List();
      orderedListOfIds = listOfIds.sort();
      /* 
        YA CON LOS IDS ORDENADOS, BUCAMOS EL PRIMER REGISTRO Y SETEAMOS VALORES POR DEFECTO DE
        TIEMPO Y ESTADO, ALMACENAMOS LOS VALORES DEL MISMO PARA COMPARAR CON EL SIGUIENTE, 
        BUSCAR SIGUIENTE Y COMPARAR TIEMPO ANTERIOR Y ACTUALIZAR ESTADO, Y ASÍ SUCESIVAMENTE (VER EXCEL)
      */
      // info orderedListOfIds;
      alreadyEdited = List();
      for each orderedId in orderedListOfIds
      {
        if(!alreadyEdited.contains(orderedId))
        {
          // ubicamos el índice de los registros en orden consecutivo
          recordId = orderedId;
          indexCandidateHistory = listOfIds.indexOf(orderedId);
          record = candidateHistoriesData.get(indexCandidateHistory);
          listFL = record.getJSON("FL");
          candidateHistoryRecordId = listFL.get(0).getJSON("content");
          // Datos de registro a comparar
          candidateId = "";
          jobId = "";
          candidateStatus = "";
          stage = "";
          createdTime = "";
          daysElapsed = 0;
          hoursElapsed = 0;
          for each item_fl in listFL
          {
            if(item_fl.getJSON("val") == "Candidato_ID")
            {
              candidateId = item_fl.getJSON("content");
            }
            if(item_fl.getJSON("val") == "Oferta_ID")
            {
              jobId = item_fl.getJSON("content");
            }
            if(item_fl.getJSON("val") == "Estado")
            {
              candidateStatus = item_fl.getJSON("content");
            }
            if(item_fl.getJSON("val") == "Created Time")
            {
              createdTime = item_fl.getJSON("content");
            }
          }
          if(statusNuevo.contains(candidateStatus))
          {
            stage = "NUEVO";
          }
          else if(statusReclutamiento.contains(candidateStatus))
          {
            stage = "RECLUTAMIENTO";
          }
          else if(statusSeleccion.contains(candidateStatus))
          {
            stage = "SELECCIÓN";
          }
          else if(statusNegocio.contains(candidateStatus))
          {
            stage = "NEGOCIO";
          }
          else if(statusCliente.contains(candidateStatus))
          {
            stage = "CLIENTE";
          }
          else if(statusContratacion.contains(candidateStatus))
          {
            stage = "CONTRATACIÓN";
          }
          else if(statusDescartado.contains(candidateStatus))
          {
            stage = "DESCARTADO";
          }
          uriUpdateRecords = 'https://recruit.zoho.com/recruit/private/xml/' + moduleName + '/updateRecords?newFormat=2&scope=recruitapi&id='+candidateHistoryRecordId+'&version=2';
          xmlData = 'xmlData=<' + moduleName + '><row no="1"><FL val="Días transcurridos">' + daysElapsed + '</FL><FL val="Horas transcurridas">' + hoursElapsed + '</FL><FL val="Etapa">' + stage + '</FL></row></' + moduleName + '>';
          // info xmlData;
          updateResp = invokeurl
          [
            url :uriUpdateRecords
            type :POST
            parameters:xmlData
            headers:headers
            connection:"oauthzrecruit"
          ];
          alreadyEdited.add(recordId);
          // info updateResp;
          /* 
            Una vez guardado el primer registro con valores por defecto volvemos
            a recorrer los registros en orden del usuario, esta vez comparando el 
            número de id, si es mayor al anterior se realizará la comparación
          */
          for each orderedId_2 in orderedListOfIds
          {
            recordId_2 = orderedId_2;
            // ubicamos el índice de los registros en orden consecutivo
            indexCandidateHistory_2 = listOfIds.indexOf(orderedId_2);
            record_2 = candidateHistoriesData.get(indexCandidateHistory_2);
            listFL_2 = record_2.getJSON("FL");
            candidateHistoryRecordId_2 = listFL_2.get(0).getJSON("content");
            // Datos del siguiente registro del candidato anterior al for
            candidateId_2 = "";
            jobId_2 = "";
            candidateStatus_2 = "";
            candidatePreviousState = "";
            stage_2 = "";
            createdTime_2 = "";
            daysElapsed_2 = 0;
            hoursElapsed_2 = 0;
            for each item_fl_2 in listFL_2
            {
              if(item_fl_2.getJSON("val") == "Candidato_ID")
              {
                candidateId_2 = item_fl_2.getJSON("content");
              }
              if(item_fl_2.getJSON("val") == "Oferta_ID")
              {
                jobId_2 = item_fl_2.getJSON("content");
              }
              if(item_fl_2.getJSON("val") == "Estado")
              {
                candidateStatus_2 = item_fl_2.getJSON("content");
              }
              if(item_fl_2.getJSON("val") == "Created Time")
              {
                createdTime_2 = item_fl_2.getJSON("content");
              }
            }
            if(statusNuevo.contains(candidateStatus_2))
            {
              stage_2 = "NUEVO";
            }
            else if(statusReclutamiento.contains(candidateStatus_2))
            {
              stage_2 = "RECLUTAMIENTO";
            }
            else if(statusSeleccion.contains(candidateStatus_2))
            {
              stage_2 = "SELECCIÓN";
            }
            else if(statusNegocio.contains(candidateStatus_2))
            {
              stage_2 = "NEGOCIO";
            }
            else if(statusCliente.contains(candidateStatus_2))
            {
              stage_2 = "CLIENTE";
            }
            else if(statusContratacion.contains(candidateStatus_2))
            {
              stage_2 = "CONTRATACIÓN";
            }
            else if(statusDescartado.contains(candidateStatus_2))
            {
              stage_2 = "DESCARTADO";
            }
            if(candidateId == candidateId_2 && jobId == jobId_2 && recordId_2.toNumber() > recordId.toNumber())
            {
              
              candidatePreviousState = candidateStatus;
              // tiempo transcurrido
              hoursElapsed_2 = hoursBetween(createdTime,createdTime_2);

              if(hoursElapsed_2 >= 24)
              {
                daysElapsed_2 = (hoursElapsed_2 / 24).floor();
                hoursElapsed_2 = hoursElapsed_2 - daysElapsed_2 * 24;
              }
              uriUpdateRecords_2 = 'https://recruit.zoho.com/recruit/private/xml/' + moduleName + '/updateRecords?newFormat=2&scope=recruitapi&id='+candidateHistoryRecordId_2+'&version=2';
              xmlData_2 = 'xmlData=<' + moduleName + '><row no="1"><FL val="Días transcurridos">' + daysElapsed_2 + '</FL><FL val="Horas transcurridas">' + hoursElapsed_2 + '</FL><FL val="Etapa">' + stage_2 + '</FL></row></' + moduleName + '>';
              // info xmlData_2;
              updateResp = invokeurl
              [
                url :uriUpdateRecords_2
                type :POST
                parameters:xmlData_2
                headers:headers
                connection:"oauthzrecruit"
              ];
              // info updateResp;
              // guarda valores del actual para comparar al siguiente
              recordId = orderedId_2;
              createdTime = createdTime_2;
              alreadyEdited.add(recordId_2);
            }
          }
        }
      }
    }
    else
    {
      /// Si sólo existe un registro, accedemos al map, capturamos id y actualizamos valores por defecto
      listFL = candidateHistoriesData.getJSON("FL");
      candidateHistoryRecordId_2 = listFL.get(0).getJSON("content");
      candidateStatus = "";
      stage = "";
      daysElapsed = 0;
      hoursElapsed = 0;
      for each item_fl in listFL
      {
        if(item_fl.getJSON("val") == "Estado")
        {
          candidateStatus = item_fl.getJSON("content");
        }
      }
      if(statusNuevo.contains(candidateStatus))
      {
        stage = "NUEVO";
      }
      else if(statusReclutamiento.contains(candidateStatus))
      {
        stage = "RECLUTAMIENTO";
      }
      else if(statusSeleccion.contains(candidateStatus))
      {
        stage = "SELECCIÓN";
      }
      else if(statusNegocio.contains(candidateStatus))
      {
        stage = "NEGOCIO";
      }
      else if(statusCliente.contains(candidateStatus))
      {
        stage = "CLIENTE";
      }
      else if(statusContratacion.contains(candidateStatus))
      {
        stage = "CONTRATACIÓN";
      }
      else if(statusDescartado.contains(candidateStatus))
      {
        stage = "DESCARTADO";
      }
      uriUpdateRecords = 'https://recruit.zoho.com/recruit/private/xml/' + moduleName + '/updateRecords?newFormat=2&scope=recruitapi&id='+candidateHistoryRecordId+'&version=2';
      xmlData = 'xmlData=<' + moduleName + '><row no="1"><FL val="Días transcurridos">' + daysElapsed + '</FL><FL val="Horas transcurridas">' + hoursElapsed + '</FL><FL val="Etapa">' + stage + '</FL></row></' + moduleName + '>';
      updateResp = invokeurl
      [
        url :uriUpdateRecords
        type :POST
        parameters:xmlData
        headers:headers
        connection:"oauthzrecruit"
      ];
      // info updateResp;
    }

    // break test
    // info "break!!!";
    // if(breakCounter == 0)
    // {
    //   break;
    // }
  }