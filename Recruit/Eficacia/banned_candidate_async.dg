// void banned_candidate_async(bigint jobId,bigint candidateId,string isBanned,string dateBirth,string requestType,string candidateStatusParam) 
// DESASOCIA CANDIDATO SI SE ENCUENTRA EN OTRA OFERTA ACTIVA
/*
isBanned = true;
candidateId = "594922000003238489";
jobId = "594922000003190279";
dateBirth = "01/01/1990";
*/
/***START: DESASOCIATE CANDIDATE ***/
uriAssociateJobsOpenins = "http://recruit.zoho.com/recruit/private/json/Candidates/getAssociatedJobOpenings?scope=recruitapi&version=2&id=" + candidateId;
uriChangeStatus = "https://recruit.zoho.com/recruit/private/json/Candidates/changeStatus?scope=recruitapi";
uriLog = "https://recruit.zoho.com/recruit/private/xml/CustomModule6/addRecords?scope=recruitapi&newFormat=1&duplicateCheck=2&version=4";
try 
{
	if(requestType == "Requisición")
	{
		//START: GET ASSOCIATE JOB OPENINGS
		responseJobs = Map();
		headers = Map();
		//This Invoke is for do a simulation of a Timeout and sleep the execution because the associate jobs by Recruit take a seconds in success
		sleepResponse = invokeurl
		[
			url :"https://wsintegracionphp.azurewebsites.net/api/v1/sleep?time=15"
			type :GET
		];
		responseJobs = invokeurl
		[
			url :uriAssociateJobsOpenins
			type :GET
			connection:"oauthzrecruit"
		];
		jobRecords = responseJobs.getJSON("response").getJSON("result");
		jobRecordsResponse = jobRecords.getJSON("Candidates").getJSON("row");
		hasMultiplesrecords = !isNull(jobRecordsResponse.get(0));
		if(hasMultiplesrecords)
		{
			//When has a multiples Work Flow rules			
			activeJobs = List();
			for each  records in jobRecordsResponse
			{
				recordsFL = records.getJSON("FL");
				status = "";
				jobActiveId = "";
				//Getting the fields of the record
				for each  record in recordsFL
				{
					val = record.getJson('val');
					if(val == "STATUS")
					{
						status = record.getJson('content');
					}
					if(val == "JOBOPENINGID")
					{
						jobActiveId = record.getJson('content');
					}
				}
				//GETTING JOB TYPE 
				asociatedJobs = zoho.recruit.getRecordById("JobOpenings",jobActiveId,"oauthzrecruit");
				jobType = asociatedJobs.getJSON("Tipo de solicitud");
				//FILTERING THE ACTIVE JOBS 
				status = status.toString();
				isInactiveJob = false;
				if(status == "Descartado")
				{
					isInactiveJob = true;
				}
				if(status == "Descalificado")
				{
					isInactiveJob = true;
				}
				if(status == "Desasociado")
				{
					isInactiveJob = true;
				}
				if(status == "Vetado")
				{
					isInactiveJob = true;
				}
				if(status == "Seleccionado en contratación")
				{
					isInactiveJob = true;
				}
				if(jobType.toString() != "Semillero" && !isInactiveJob)
				{
					activeJobs.add(jobActiveId);
				}
			}
			//CHECKING IF HAS A MORE ONE ACTIVE JOB
			if(activeJobs.size() > 1)
			{
				newStatus = "Desasociado";
				hegther = activeJobs.size() - 1;
				activeJobs.remove(hegther);
				for each  jobActiveId in activeJobs
				{
					uriChangeStatus = uriChangeStatus + "&jobId=" + jobActiveId + "&candidateIds=" + candidateId + "&candidateStatus=" + newStatus;
					xmlData = "comments='Ya tiene un proceso activo'";
					headers = Map();
					headers.put("content-type","application/x-www-form-urlencoded");
					updateStatusResponse = Map();
					//updateStatusResponse = postUrl(uriChangeStatus,xmlData,headers,false);
					/**/
					updateStatusResponse = invokeurl
					[
						url :uriChangeStatus
						type :POST
						parameters:xmlData
						headers:headers
						connection:"oauthzrecruit"
					];
					info updateStatusResponse;
				}
			}
			/*	
			xmlData = 'xmlData=<CustomModule6><row no="1"><FL val="Cod"></FL><FL val="Response"><![CDATA[' + responseJobs.toString() + ']]></FL><FL val="Msg"><![CDATA[' + jobType.toString() + ']]></FL><FL val="Integration"></FL><FL val="Method">Desasociado</FL><FL val="Params"></FL></row></CustomModule6>';
			headers = Map();
			headers.put("content-type","application/x-www-form-urlencoded");
			logResponse = Map();
			//logResponse = postUrl(uriLog,xmlData,headers,false);
			logResponse = invokeurl
			[
				url :uriLog
				type :POST
				parameters:xmlData
				headers:headers
				detailed:true
				connection:"oauthzrecruit"
			];
			*/
		}
	}
	/***END: DESASOCIATE CANDIDATE ***/
	/***START: BANNED CANDIDATE ***/
	parm = "jobId = " + jobId + " candidateId=" + candidateId + " isBanned=" + isBanned + " dateBirth=" + dateBirth;
	uriChangeStatus = "https://recruit.zoho.com/recruit/private/json/Candidates/changeStatus?scope=recruitapi";
	if(isBanned == "true")
	{
		newStatus = "Vetado";
		uriChangeStatus = uriChangeStatus + "&jobId=" + jobId + "&candidateIds=" + candidateId + "&candidateStatus=" + newStatus;
		params = "comments='Candidato vetado'";
		headers = Map();
		headers.put("content-type","application/x-www-form-urlencoded");
		response = invokeurl
		[
			url :uriChangeStatus
			type :POST
			parameters:params
			headers:headers
			connection:"oauthzrecruit"
		];
		info response;
		/*
		xmlData = 'xmlData=<CustomModule6><row no="1"><FL val="Cod"></FL><FL val="Response"><![CDATA[' + response.toString() + ']]></FL><FL val="Msg"><![CDATA[' + uriChangeStatus.toString() + ']]></FL><FL val="Integration"></FL><FL val="Method">Vetado</FL><FL val="Params"></FL></row></CustomModule6>';
		headers = Map();
		headers.put("content-type","application/x-www-form-urlencoded");
		logResponse = Map();
		//logResponse = postUrl(uriLog,xmlData,headers,false);
		logResponse = invokeurl
		[
			url :uriLog
			type :POST
			parameters:xmlData
			headers:headers
			detailed:true
			connection:"oauthzrecruit"
		];
		*/
	}
	/***END: BANNED CANDIDATE ***/
	/***START:BIRDTHDAY ***/
	edgeResponse = "";
	if(!isNull(dateBirth))
	{
		edge = yearsDiff(dateBirth,today);
		paramEdge = Map();
		paramEdge.put("Edad",edge);
		edgeResponse = zoho.recruit.updateRecord("Candidates",candidateId,paramEdge,"oauthzrecruit");
	}
	/***END:BIRDTHDAY ***/
}
 catch (error)
{	xmlData = 'xmlData=<CustomModule6><row no="1"><FL val="Cod"></FL><FL val="Response">' + error.toString() + '-->' + jobId.toString() + '--->' + candidateStatusParam.toString() + '</FL><FL val="Msg"><![CDATA[' + responseJobs.toString() + ']]></FL><FL val="Integration"></FL><FL val="Method">Desasociado</FL><FL val="Params"></FL></row></CustomModule6>';
	headers = Map();
	headers.put("content-type","application/x-www-form-urlencoded");
	logResponse = Map();
	//logResponse = postUrl(uriLog,xmlData,headers,false);
	logResponse = invokeurl
	[
		url :uriLog
		type :POST
		parameters:xmlData
		headers:headers
		detailed:true
		connection:"oauthzrecruit"
	];
}