/**
  * Creado por: Brayan Devia Machado
  * Última actualización: 28/04/2021 17:31
  * Utilidad: Registra cambio de estado de Candidatos y tiempo transcurrido
  *	Empresa: velaio.com
  * Versión: 2.1.1
  * Ref: recruit/save_candidate_status-v2.dg
  */
// ====================================== PRUEBAS =============================
//candidate_id = "594922000005285003";
//jobId = "594922000005227079";
//candidateStatus = "Preselección";
// jobName = "SUPERVISOR BOGOTÁ";
// ==================================== PRODUCCIÓN ============================
// INICIO Variables API **************************************
moduleName = "CustomModule17";
uriStatesHistory = "https://recruit.zoho.com/recruit/private/xml/" + moduleName + "/addRecords?scope=recruitapi&newFormat=1&duplicateCheck=2&version=4";
uriGetStatus = "https://recruit.zoho.com/recruit/private/json/" + moduleName + "/getSearchRecords?scope=recruitapi&version=2&newFormat=2&selectColumns=All&fromIndex=1&toIndex=100";
// FIN Variables API **************************************
// INICIO Variables globales ********************************
firstName = "";
lastName = "";
fullName = "";
previousState = "";
stage = "";
previousStage = "";
finalStatus = "false";
// Búsqueda de registro del candidato para tomar nombre completo
candidate = zoho.recruit.getRecordById("Candidates",candidate_id);
// Registro de tiempo
timeElapsed = "00:00:00";
daysElapsed = 0;
hoursElapsed = 0;
minsElapsed = 0;
// Headers Invokeurl
headers = Map();
headers.put("content-type","application/x-www-form-urlencoded");
// FIN Variables globales ********************************
// INICIO construcción nombre ********************************
if(!isNull(candidate.getJSON("First Name")))
{
	firstName = candidate.getJSON("First Name");
}
if(!isNull(candidate.getJSON("Last Name")))
{
	lastName = candidate.getJSON("Last Name");
}
fullName = firstName + " " + lastName;
// FIN construcción nombre ********************************
// INICIO Búsqueda candidato en Historial de Estados ********************
queryParams = "searchCondition=(Candidato|=|" + fullName.toString() + ")";
statusHistoryReponse = Map();
statusHistoryReponse = invokeurl
[
	url :uriGetStatus
	type :POST
	parameters:queryParams
	headers:headers
	connection:"oauthzrecruit"
];
// info "statusHistoryReponse:";
// info statusHistoryReponse;
// FIN Búsqueda candidato en Historial de Estados ********************
data = statusHistoryReponse.getJSON("response").getJSON("result");
haveData = !isNull(data);
// info "data: " + data;
/// Validación de estado anterior (si hay registros)
if(haveData)
{
	// si hay registros, obtiene las filas
	data = data.getJSON(moduleName).getJSON("row");
	// Sí hay más de 1 registro para ese usuario es una Lista
	haveMultipleRecords = !isNull(data.get(0));
	if(haveMultipleRecords)
	{
		// info data;
		lastRecordId = 0;
		for each  record in data
		{
      // por cada registro se toman los valores del campo FL
			listFL = record.getJSON("FL");
			fl_candidateId = "";
			fl_candidateStatus = "";
			fl_candidateStage = "";
			fl_jobId = "";
			fl_createdTime = "";
			fl_recordId = 0;
      fl_jobName = "";
			//info listFL;
      // Se recorren los registros y se toman los valores de c/u
			for each  item in listFL
			{
				val = item.getJSON("val");
				if(val == "Candidato_ID")
				{
					fl_candidateId = item.getJSON("content");
				}
				if(val == "Estado")
				{
					fl_candidateStatus = item.getJSON("content");
				}
				if(val == "Etapa")
				{
					fl_candidateStage = item.getJSON("content");
				}
				if(val == "Oferta_ID")
				{
					fl_jobId = item.getJSON("content");
				}
				if(val == "Created Time")
				{
					fl_createdTime = item.getJSON("content");
				}
				if(val == moduleName + " Name")
				{
					fl_recordId = item.getJSON("content").toNumber();
				}
			}
      // Si el id de candidato es igual al que viene por param y el trabajo (entra)
      // Puede ser que haya otro registro del usuario con otro trabajo asignado
			if(fl_candidateId.toNumber() == candidate_id && fl_jobId.toNumber() == jobId)
			{
        /**
          * Los registros tienen un id visual autoincrementable desde 3000
          * tomamos ese valor y lo asignamos a lastRecordId, si haya otro registro
          * que tenga un valor mayor, toma esos valores y los asigna a las variables
          * globales, esto recorre todos los registros del mismo usuario y mismo trabajo
          * y toma los datos del último registro creado.
          */
				if(fl_recordId > lastRecordId)
				{
					lastRecordId = fl_recordId;
					previousState = fl_candidateStatus;
					previousStage = fl_candidateStage;
					// tiempo transcurrido
					timeElapsed = fl_createdTime.timeBetween(now);
					hoursElapsed = hoursBetween(fl_createdTime,now);
					if(hoursElapsed >= 24)
					{
						daysElapsed = (hoursElapsed / 24).floor();
						hoursElapsed = hoursElapsed - daysElapsed * 24;
					}
				}
			}
		}
	}
	else
	{
		// Sí sólo hay 1 registro, es un map
		listFL = data.getJSON("FL");
		fl_createdTime = "";
		for each  item in listFL
		{
			val = item.getJSON("val");
			if(val == "Estado")
			{
				previousState = item.getJSON("content");
			}
			if(val == "Created Time")
			{
				fl_createdTime = item.getJSON("content");
			}
			// tiempo transcurrido
			timeElapsed = fl_createdTime.timeBetween(now);
			hoursElapsed = hoursBetween(fl_createdTime,now);
			if(hoursElapsed >= 24)
			{
				daysElapsed = (hoursElapsed / 24).floor();
				hoursElapsed = hoursElapsed - daysElapsed * 24;
			}
		}
	}
}
/// Setea valor de estado final 
if(candidateStatus == "Descartado" || candidateStatus == "Descalificado" || candidateStatus == "Seleccionado en contratación")
{
	finalStatus = "true";
}
/// Setea la etapa según su estado
statusReclutamiento = {'Nuevo', 'Asociado','Activar flujo de trabajo','En validación de BD externas', 'Desasociado'};
statusSeleccion = {'Preselección','Solicita información adicional/Documentos','Programar entrevista de selección','En entrevista de selección','En Prueba de selección','Entrevista de selección programada','Interview to be scheduled','Interview-Scheduled'};
statusNegocio = {'Programar entrevista (negocio)','Entrevista negocio programada','En prueba técnica (Negocio)'};
statusCliente = {'Enviar a revisión del cliente','En revisión del cliente masivo','En revisión del cliente individual','Programar entrevista (Cliente)','Entrevista cliente programada','Prueba técnica (cliente)','Aprobado por el cliente','Rechazado por el cliente'};
statusContratacion = {'En estudio de seguridad','Semillero para contratar','Seleccionado en contratación','En exámenes médicos','Descartado en contratación','En contratación','Contratado'};
// Descartado y Desacalificado => Queda en la etapa del estado anterior (Jaime 28/04/21)
statusDescartado = {'Descalificado','Descartado'};
// Validación
if(statusReclutamiento.contains(candidateStatus))
{
	stage = "RECLUTAMIENTO";
}
else if(statusSeleccion.contains(candidateStatus))
{
	stage = "SELECCIÓN";
}
else if(statusNegocio.contains(candidateStatus))
{
	stage = "NEGOCIO";
}
else if(statusCliente.contains(candidateStatus))
{
	stage = "CLIENTE";
}
else if(statusContratacion.contains(candidateStatus))
{
	stage = "CONTRATACIÓN";
}
else if(statusDescartado.contains(candidateStatus))
{
	stage = previousStage;
}
/// construye XML Data para enviar a petición POST/PUT y Guardar
xmlData = 'xmlData=<' + moduleName + '><row no="1"><FL val="Estado final"><![CDATA[' + finalStatus + ']]></FL><FL val="Estado">' + candidateStatus + '</FL><FL val="Candidato_ID">' + candidate_id + '</FL><FL val="Oferta_ID">' + jobId + '</FL><FL val="Estado anterior">' + previousState + '</FL><FL val="Tiempo transcurrido">' + timeElapsed + '</FL><FL val="Días transcurridos">' + daysElapsed + '</FL><FL val="Horas transcurridas">' + hoursElapsed + '</FL><FL val="Etapa">' + stage + '</FL><FL val="Nombre oferta">' + jobName + '</FL></row></' + moduleName + '>';
// info xmlData;
response = invokeurl
[
	url :uriStatesHistory
	type :POST
	parameters:xmlData
	headers:headers
	connection:"oauthzrecruit"
];
info response;