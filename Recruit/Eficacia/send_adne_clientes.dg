// void send_adne_clientes(string logElenius,bigint adneClienteId,string uriCreateClientADNe,string eleniusSecretKey,string eleniusApiKey) 

/*
  -----ELENIUS----
0. Obtiene el ADNE_Candidatos
1. Buscar el candidato (Se busca primero por cedula y si no se encuentra por email)
2. Relaciona el registro con el ADNE_Candidatos / Update al candidato
3. Consolidar la información que se va enviar (Consultar otros modulos cuando se trate de campos  de busqueda o relacionados / Lookup)
4. Se concatena el test (prueba) para enviarlo en la API, Ver documentación
5. Se hace el envio y se guarda la respuesta en el log, siempre se tiene que considerar el estado de la variable log_elenius para guardar o no en el log.

log_elenius = 1  (Reportar todo, mesajes de error y de exito)
log_elenius = 2  (Reportar solo mensajes de error)
log_elenius = 3  (Deshabilitar, no reporta nada)
*/
uriCustomModule7States = "https://recruit.zoho.com/recruit/private/json/CustomModule7/getRecordById?scope=recruitapi&version=2&newFormat=1";
uriLog = "https://recruit.zoho.com/recruit/private/xml/CustomModule6/addRecords?scope=recruitapi&newFormat=1&duplicateCheck=2&version=4";
/*
adneClienteId = "594922000005004306";
eleniusSecretKey = "ddafa1fff8e1261e633576e4ef69d06478260d4f4001ce43517ddb34573f26de";
eleniusApiKey = "edb76ee83bcd1ff7659d42fa2b4fde63";
uriCreateClientADNe = "http://adnesolutions.com/API/testEmpresa/crear/";
*/
// control de tiempo de ejecución: Brayan Dev. ====================== //
startExecutionTime = now;
endExecutionTime = "";
timeExecution = "";
// ================================================================== //
try 
{
	//*****GETING THE ADNeCandidato PARAMS***//
	ADNeClienteResponse = zoho.recruit.getRecordById("CustomModule2",adneClienteId, "oauthzrecruit");
	clientIdADNe = ADNeClienteResponse.getJson("Cliente Id");
	//*****QUERY CANDIDATO WITH EMAIL OR CEDULA PARAMS***//
	if(!isNull(clientIdADNe))
	{
		queryParms = "Id del cliente|=|" + clientIdADNe;
		columns = "All";
		clientResponse = zoho.recruit.searchRecords("Clients",queryParms,1,1,columns, "oauthzrecruit");
		clientId = clientResponse.getJson("CLIENTID");
		//*****UPDATING ADNeclients***//
		ADNeClienteResponse.put("Cliente_ID",clientId);
		nit = clientResponse.getJSON('NIT');
		if(isNull(nit))
		{
			nit = "";
		}
		response = zoho.recruit.updateRecord("CustomModule2",adneClienteId,ADNeClienteResponse, "oauthzrecruit");
		//*****ADDRES INFORMATION***//
		country = clientResponse.getJSON('Pais');
		if(isNull(country))
		{
			country = "";
		}
		city = clientResponse.getJSON('Ciudad');
		if(isNull(city))
		{
			city = "";
		}
		cityId = clientResponse.getJSON('Ciudad_ID');
		if(isNull(cityId))
		{
			cityId = "";
		}
		state = clientResponse.getJSON('Departmento');
		if(isNull(state))
		{
			state = "";
		}
		stateId = clientResponse.getJSON('Departmento_ID');
		if(isNull(stateId))
		{
			stateId = "";
		}
		stateCode = "";
		cityCode = "";
		//GETTING THE STATE CODE 
		if(!isNull(stateId))
		{
			stateResponse = zoho.recruit.getRecordById("CustomModule5",stateId, "oauthzrecruit");
			stateCode = stateResponse.getJson("Codigo");
		}
		//GETTING THE CITY CODE 
		if(!isNull(cityId))
		{
			//cityResponse = getUrl(uriCustomModule7States + '&id=' + cityId);
			cityResponse = invokeurl
			[
				url :uriCustomModule7States + "&id=" + cityId
				type :GET
				connection:"oauthzrecruit"
			];
			fieldsCityModule = cityResponse.getJson('response').getJson('result').getJson('CustomModule7').getJson('row').getJson('FL');
			for each  fieldCityModule in fieldsCityModule
			{
				fieldRecord = fieldCityModule.getJson('val');
				if(fieldRecord == 'Codigo')
				{
					cityCode = fieldCityModule.getJson('content');
				}
			}
		}
		//CLIENT NAME
		clientName = clientResponse.getJSON('Client Name');
		if(isNull(clientName))
		{
			clientName = "";
		}
		//START: DATE FORMAT
		createDateTime_temp = clientResponse.getJson("Created Time");
		createDateTime_temp = createDateTime_temp.toList(" ");
		createDate = createDateTime_temp.get(0);
		createTime = createDateTime_temp.get(1);
		createDate = createDate.toList("-");
		day = createDate.get(2);
		month = createDate.get(1);
		year = createDate.get(0);
		createDateTime = day + "/" + month + "/" + year + " " + createTime;
		//END: Date format 	
		//START: GET CONTACT DATA
		contactId = clientResponse.getJson("Contacto principal_ID");
		lastName1 = "";
		lastName2 = "";
		firtsName = "";
		email = "";
		mobile = "";
		if(!isNull(contactId))
		{
			contactResponse = zoho.recruit.getRecordById("Contacts",contactId, "oauthzrecruit");
			firtsName = contactResponse.getJSON('First Name');
			lastName = contactResponse.getJSON('Last Name');
			listLastName = lastName.toList(" ");
			lastName1 = listLastName.get(0);
			if(listLastName.size() > 1)
			{
				lastName2 = listLastName.get(1);
			}
			email = contactResponse.getJSON('Email');
			if(isNull(email))
			{
				email = "";
			}
			mobile = contactResponse.getJSON('Mobile');
			if(isNull(mobile))
			{
				mobile = "";
			}
		}
		//START: Preparing TesAND
		ADNeClientsKeys = ADNeClienteResponse.keys();
		ANDanswers = "";
		lengthTestADN = 59;
		i = 1;
		for each  key in ADNeClientsKeys
		{
			question = key.toList(".");
			if(question.get(0).isNumber())
			{
				questioId = question.get(0);
				questionValueTemp = ADNeClienteResponse.get(key);
				if(questionValueTemp == 'No,nunca')
				{
					questionValue = '0';
				}
				else if(questionValue == 'Rara vez')
				{
					questionValue = '1';
				}
				else if(questionValue == 'Algunas veces')
				{
					questionValue = '2';
				}
				else if(questionValue == 'A menudo')
				{
					questionValue = '3';
				}
				else
				{
					questionValue = '3';
				}
				if(i < lengthTestADN)
				{
					ANDanswers = ANDanswers + questioId + ":" + questionValue + ";";
				}
				else
				{
					ANDanswers = ANDanswers + questioId + ":" + questionValue;
				}
				i = i + 1;
			}
		}
		//END: Preparing TesAND		
		//START: BUILDING THE MAP
		/**/
		params = Map();
		params.put("Marca",createDateTime);
		params.put("CodigoCliente",nit);
		params.put("RazonSocial",clientName);
		params.put("CodigoDepartamento",stateCode);
		params.put("Departamento",state);
		params.put("CodigoCiudad",cityCode);
		params.put("Ciudad",city);
		params.put("ContactoNombre",firtsName);
		params.put("ContactoApellido1",lastName1);
		params.put("ContactoApellido2",lastName2);
		params.put("ContactoMail",email);
		params.put("Celular",mobile);
		params.put("TestADN",ANDanswers);
		params.put("api_key",eleniusApiKey);
		params.put("secret",eleniusSecretKey);
		//info params;
		//*****SEND THE DATA***//
		info params.toString();
		headers = Map();
		adnesolutionsResponse = Map();
		headers.put("content-type","application/json");
		adnesolutionsResponse = postUrl(uriCreateClientADNe,params.toString(),headers,false);
		endExecutionTime = now;
		timeExecution = startExecutionTime.timeBetween(endExecutionTime);
		//*****LOG RESPONSE***//
		responseText = adnesolutionsResponse.getJson("responseText");
		responseText = responseText.toString();
		responseCode = adnesolutionsResponse.getJson("responseCode");
		if(logElenius == "1")
		{
			xmlData = 'xmlData=<CustomModule6><row no="1"><FL val="Cod">' + responseCode + '</FL><FL val="Response">' + responseText + '</FL><FL val="Msg">send_adne_clientes</FL><FL val="Integration">Elenius</FL><FL val="Method">' + uriCreateClientADNe + '</FL><FL val="Params">' + params.toString() + '</FL><FL val="Inicio de ejecución">' + startExecutionTime + '</FL><FL val="Fin de ejecución">' + endExecutionTime + '</FL><FL val="Tiempo de ejecución">' + timeExecution + '</FL></row></CustomModule6>';
			headers = Map();
			headers.put("content-type","application/x-www-form-urlencoded");
			logResponse = Map();
			//logResponse = postUrl(uriLog,xmlData,headers,false);
			logResponse = invokeurl
			[
				url :uriLog
				type :POST
				parameters:xmlData
				headers:headers
				detailed:true
				connection:"oauthzrecruit"
			];
		}
	}
	else
	{
		if(logElenius == "1")
		{
			xmlData = 'xmlData=<CustomModule6><row no="1"><FL val="Cod">400</FL><FL val="Response">El NIT de ANDClientes no fue encontrado</FL><FL val="Msg">send_adne_clientes</FL><FL val="Integration">Elenius</FL><FL val="Method">' + uriCreateClientADNe + '</FL><FL val="Params"></FL><FL val="Inicio de ejecución">' + startExecutionTime + '</FL><FL val="Fin de ejecución">' + endExecutionTime + '</FL><FL val="Tiempo de ejecución">' + timeExecution + '</FL></row></CustomModule6>';
			headers = Map();
			headers.put("content-type","application/x-www-form-urlencoded");
			logResponse = Map();
			//logResponse = postUrl(uriLog,xmlData,headers,false);
			logResponse = invokeurl
			[
				url :uriLog
				type :POST
				parameters:xmlData
				headers:headers
				detailed:true
				connection:"oauthzrecruit"
			];
			info logResponse;
		}
	}
}
 catch (e)
{	endExecutionTime = now;
	timeExecution = startExecutionTime.timeBetween(endExecutionTime);
	if(logElenius == "1")
	{
		xmlData = 'xmlData=<CustomModule6><row no="1"><FL val="Cod"></FL><FL val="Response">' + e.toString() + '</FL><FL val="Msg">send_adne_clientes></FL><FL val="Integration">Elenius</FL><FL val="Method">' + uriCreateClientADNe + '</FL><FL val="Params"></FL><FL val="Inicio de ejecución">' + startExecutionTime + '</FL><FL val="Fin de ejecución">' + endExecutionTime + '</FL><FL val="Tiempo de ejecución">' + timeExecution + '</FL><FL val="Crashed">TRUE</FL></row></CustomModule6>';
		headers = Map();
		headers.put("content-type","application/x-www-form-urlencoded");
		logResponse = Map();
		//logResponse = postUrl(uriLog,xmlData,headers,false);
		logResponse = invokeurl
		[
			url :uriLog
			type :POST
			parameters:xmlData
			headers:headers
			detailed:true
			connection:"oauthzrecruit"
		];
	}
}