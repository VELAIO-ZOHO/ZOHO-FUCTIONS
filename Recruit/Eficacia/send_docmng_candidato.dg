// void send_docmng_candidato(bigint candidateId,string log,bigint jobId,string uriDocManager,string uriAccessTokenDocMngr)

/*
candidateId = "594922000005076058";
jobId = "594922000005075517";
uriDocManager = "https://wsintegracion.azurewebsites.net/webservice/DocManager/storeFully";
uriAccessTokenDocMngr = "https://wsintegracion.azurewebsites.net/oauth/token";
*/
docManagerConfiguration = "594922000001289498";
uriGetRelateAttachments = "https://recruit.zoho.com/recruit/private/json/Attachments/getRelatedRecords?newFormat=1&scope=recruitapi&parentModule=Candidates";
uriLog = "https://recruit.zoho.com/recruit/private/xml/CustomModule6/addRecords?scope=recruitapi&newFormat=1&duplicateCheck=2&version=4";
uriProcessedCandidates = "https://recruit.zoho.com/recruit/private/xml/CustomModule14/addRecords?scope=recruitapi&newFormat=1&duplicateCheck=2&version=4";
uriGetAccessTokenFromZoho = "https://recruit.zoho.com/recruit/private/json/CustomModule15/getRecordById?scope=recruitapi&version=2&id=" + docManagerConfiguration;
uriUpdateAccessTokenFromZoho = "https://recruit.zoho.com/recruit/private/xml/CustomModule15/updateRecords?scope=recruitapi&version=2&id=" + docManagerConfiguration + "&wfTrigger=true";
candidateDocument = "";
// control de tiempo de ejecución: Brayan Dev. ====================== //
startExecutionTime = now;
endExecutionTime = "";
executionTime = "";
// ================================================================== //
try 
{
	currentDate = today;
	params = Map();
	params.put("Tracking",currentDate.toString());
	zoho.recruit.updateRecord("Candidates",candidateId,params,"oauthzrecruit");
	/*----START: QUERY THE ACCES TOKEN----*/
	/*START: SEARCHING THE CANDIDATES PROCESSED*/
	headers = Map();
	headers.put("content-type","application/x-www-form-urlencoded");
	//tokenRocord = getUrl(uriGetAccessTokenFromZoho,headers);
	tokenRocord = invokeurl
	[
		url :uriGetAccessTokenFromZoho
		type :GET
		headers:headers
		connection:"oauthzrecruit"
	];
	tokenRocordResult = tokenRocord.getJson("response").getJson("result");
	existTokenRocord = !isNull(tokenRocordResult);
	if(existTokenRocord)
	{
		recordsFL = tokenRocordResult.getJSON("CustomModule15").getJSON("row").getJSON("FL");
		accessTokenUpdateAt = "";
		token = "";
		userDocMngr = "";
		passwordDocMngr = "";
		autorization = "";
		currentDate = now;
		//Getting the fields of the records
		for each  record in recordsFL
		{
			val = record.getJson('val');
			if(val == 'Modified Time')
			{
				accessTokenUpdateAt = record.getJson('content');
			}
			if(val == 'Access Token Doc Manager')
			{
				token = record.getJson('content');
			}
			if(val == 'usuario Doc Manager')
			{
				userDocMngr = record.getJson('content');
			}
			if(val == 'contraseña Doc Manager')
			{
				passwordDocMngr = record.getJson('content');
			}
			if(val == 'Authorization')
			{
				autorization = record.getJson('content');
			}
		}
		tokenUpdateAtHours = accessTokenUpdateAt.hoursBetween(currentDate);
		//Checking if the token is invalid
		if(tokenUpdateAtHours > 20)
		{
			/*----START: GENERATE ACCES TOKEN----*/
			postData = "username=" + userDocMngr + "&password=" + passwordDocMngr + "&grant_type=password";
			headersAccesToken = Map();
			headersAccesToken.put("Content-Type","application/x-www-form-urlencoded");
			headersAccesToken.put("Authorization","Basic " + autorization.toString());
			//responseAccesToken = postUrl(uriAccessTokenDocMngr,postData,headersAccesToken,false);		
			responseAccesToken = invokeurl
			[
				url :uriAccessTokenDocMngr
				type :POST
				parameters:postData
				headers:headersAccesToken
			];
			//info responseAccesToken;
			token = responseAccesToken.getJSON("access_token");
			/*----END: GENERATE ACCES TOKEN----*/
			/*----START: UPDATING ACCES TOKEN----*/
			xmlData = 'xmlData=<CustomModule15><row no="1"><FL val="Access Token Doc Manager"><![CDATA[' + token + ']]></FL></row></CustomModule15>';
			headers = Map();
			headers.put("content-type","application/x-www-form-urlencoded");
			logResponse = Map();
			//logResponse = postUrl(uriUpdateAccessTokenFromZoho,xmlData,headers,false);
			logResponse = invokeurl
			[
				url :uriUpdateAccessTokenFromZoho
				type :POST
				parameters:xmlData
				headers:headers
				connection:"oauthzrecruit"
			];
			//info logResponse;
			/*----END: UPDATING ACCES TOKEN----*/
		}
	}
	/*----END: QUERY THE ACCES TOKEN----*/
<<<<<<< HEAD
	jobResponse = zoho.recruit.getRecordById("JobOpenings",jobId, "oauthzrecruit");
	candidateResponse = zoho.recruit.getRecordById("Candidates",candidateId, "oauthzrecruit");
=======
	jobResponse = zoho.recruit.getRecordById("JobOpenings",jobId,"oauthzrecruit");
	candidateResponse = zoho.recruit.getRecordById("Candidates",candidateId,"oauthzrecruit");
>>>>>>> dca3e6aef9c2b30c663084f7eb6efb3760c5054c
	idRequisicion = jobResponse.getJSON("ID de la requisición");
	candidateDocument = candidateResponse.getJSON("Número de documento");
	clientId = jobResponse.getJSON('CLIENTID');
	idRequisicionInDocManager = jobResponse.getJSON("Id docmanager");
	if(isNull(idRequisicionInDocManager))
	{
		idRequisicionInDocManager = "";
	}
	/*START: idxVinculacion*/
	idxVinculacion = "";
	if(!isNull(idRequisicion) && !isNull(candidateDocument))
	{
		idxVinculacion = idRequisicion + candidateDocument;
	}
	if(isNull(idRequisicion) && !isNull(candidateDocument))
	{
		idxVinculacion = candidateDocument;
	}
	if(!isNull(idRequisicion) && isNull(candidateDocument))
	{
		idxVinculacion = idRequisicion;
	}
	idxVinculacionObj = Map();
	idxVinculacionObj.put("Id","83");
	idxVinculacionObj.put("Value",idxVinculacion);
	/*END: idxVinculacion*/
	/*START: requisicion*/
	if(isNull(idRequisicion))
	{
		idRequisicion = "";
	}
	requisicionObj = Map();
	requisicionObj.put("Id","84");
	requisicionObj.put("Value",idRequisicion);
	/*END: requisicion*/
	/*START: document Number*/
	if(isNull(candidateDocument))
	{
		candidateDocument = "";
	}
	candidateDocumentObj = Map();
	candidateDocumentObj.put("Id","12");
	candidateDocumentObj.put("Value",candidateDocument);
	/*END: document number*/
	// START: Company Name
	companyName = jobResponse.getJson("Empresa");
	if(companyName == "Eficacia")
	{
		companyName = "EFICACIA";
	}
	if(companyName == "Ezenza")
	{
		companyName = "EZENZA";
	}
	if(companyName == "Extras")
	{
		companyName = "EXTRAS";
	}
	companyNameObj = Map();
	companyNameObj.put("Id","1");
	companyNameObj.put("Value",companyName);
	// END: Company Name	
	// START: Job Title
	jobTitle = jobResponse.getJson("Posting Title");
	if(isNull(jobTitle))
	{
		jobTitle = "";
	}
	jobTitleObj = Map();
	jobTitleObj.put("Id","6");
	jobTitleObj.put("Value",jobTitle);
	// END: Job Title	
	//START: Admision date
	dateOfAdmissionTemp = jobResponse.getJson("Fecha de Ingreso");
	if(!isNull(dateOfAdmissionTemp))
	{
		dateOfAdmissionTemp = dateOfAdmissionTemp.toDate();
		dateOfAdmission = dateOfAdmissionTemp.getMonth() + "/" + dateOfAdmissionTemp.getDay() + "/" + dateOfAdmissionTemp.getYear();
		dateOfAdmissionObj = Map();
		dateOfAdmissionObj.put("Id","8");
		dateOfAdmissionObj.put("Value",dateOfAdmission);
	}
	//END: Admision date
	//START: ZONE
	zone = jobResponse.getJson("Zona de contratación");
	if(isNull(zone))
	{
		zone = "";
	}
	zoneObj = Map();
	zoneObj.put("Id","5");
	zoneObj.put("Value",zone);
	//END: ZONE		
	// START: Firts name
	firtsName = candidateResponse.getJson('First Name');
	if(isNull(firtsName))
	{
		firtsName = "";
	}
	firtsNameObj = Map();
	firtsNameObj.put("Id","10");
	firtsNameObj.put("Value",firtsName);
	// END: Firts name		
	// START: Last name
	lastName = candidateResponse.getJson('Last Name');
	if(isNull(lastName))
	{
		lastName = "";
	}
	lastNameObj = Map();
	lastNameObj.put("Id","11");
	lastNameObj.put("Value",lastName);
	// END: Last name
	//START:  Mobile number
	mobile = candidateResponse.getJson("Mobile");
	if(isNull(mobile))
	{
		mobile = "";
	}
	mobileObj = Map();
	mobileObj.put("Id","15");
	mobileObj.put("Value",mobile);
	// START: Mobile number
	//START:  Email
	email = candidateResponse.getJson("Email");
	if(isNull(email))
	{
		email = "";
	}
	emailObj = Map();
	emailObj.put("Id","13");
	emailObj.put("Value",email);
	// START: Email
	//START: EDUCATIONALS DETAILS
	maxLevelStudy = 20;
	maxLevelStudyTemp = candidateResponse.getJson('Nivel máximo estudio alcanzado');
	if(maxLevelStudyTemp == "Especialización" || maxLevelStudyTemp == "Pos doctorado" || maxLevelStudyTemp == "Doctorado")
	{
		maxLevelStudy = 24;
	}
	if(maxLevelStudyTemp == "Maestría")
	{
		maxLevelStudy = 25;
	}
	if(maxLevelStudyTemp == "Profesional" || maxLevelStudyTemp == "Pregrado")
	{
		maxLevelStudy = 23;
	}
	if(maxLevelStudyTemp == "Tecnólogo")
	{
		maxLevelStudy = 22;
	}
	if(maxLevelStudyTemp == 'Técnico')
	{
		maxLevelStudy = 21;
	}
	if(maxLevelStudyTemp == "Bachillerato")
	{
		maxLevelStudy = 20;
	}
	if(maxLevelStudyTemp == "Primaria")
	{
		maxLevelStudy = 19;
	}
	maxLevelStudyObj = Map();
	maxLevelStudyObj.put("Id","27");
	maxLevelStudyObj.put("Value",maxLevelStudy);
	//END: EDUCATIONALS DETAILS	
	/***-----START: GET ATTACHMENTS-----***/
	//attachmentsResponse = getUrl(uriGetRelateAttachments + "&id=" + candidateId);
	attachmentsResponse = invokeurl
	[
		url :uriGetRelateAttachments + "&id=" + candidateId
		type :GET
		connection:"oauthzrecruit"
	];
	attachmentsList = attachmentsResponse.getJSON("response").getJSON("result");
	curriculumVitaeBase64 = "";
	curriculumVitaeName = "";
	indentityNumberBase64 = "";
	indentityNumberFileName = "";
	electronicSignatureBase64 = "";
	electronicSignatureFileName = "";
	diplomaBase64 = "";
	diplomaFileName = "";
	disciplinaryHistoryBase64 = "";
	disciplinaryHistoryFileName = "";
	judicialBackgroundBase64 = "";
	judicialBackgroundFileName = "";
	socialSecurityBase64 = "";
	socialSecurityFileName = "";
	workCertificationBase64 = "";
	workCertificationFileName = "";
	academicFormationBase64 = "";
	academicFormationFilename = "";
	workCertification2Base64 = "";
	workCertification2FileName = "";
	//Courses- certifications- diplomas and others
	studyCertificationsBase64 = "";
	studyCertificationsFileName = "";
	forkliftOperatorCertificationsBase64 = "";
	forkliftOperatorCertificationsFileName = "";
	vaccineCardBase64 = "";
	vaccineCardFileName = "";
	craneOperatorCertificationBase64 = "";
	craneOperatorCertificationFileName = "";
	foodHandlingCertificateBase64 = "";
	foodHandlingCertificateFileName = "";
	workCertificateAtHeightsBase64 = "";
	workCertificateAtHeightsFileName = "";
	roadTrafficCourseBase64 = "";
	roadTrafficCourseFileName = "";
	drivingLicenseBase64 = "";
	drivingLicenseFileName = "";
	MechanicalTechnicalReviewBase64 = "";
	MechanicalTechnicalReviewFileName = "";
	vehicleOwnershipCardBase64 = "";
	vehicleOwnershipCardFileName = "";
	soatBase64 = "";
	soatFileName = "";
	//Academic training
	certificateOfStudiesFileName = "";
	certificateOfStudiesBase64 = "";
	highSchoolDiplomaFileName = "";
	highSchoolDiplomaBase64 = "";
	diplomaTechnicalEducationFileName = "";
	diplomaTechnicalEducationBase64 = "";
	technologyEducationDiplomaFileName = "";
	technologyEducationDiplomaBase64 = "";
	graduateDiplomaFileName = "";
	graduateDiplomaBase64 = "";
	diplomaProfessionalCertificateBase64 = "";
	diplomaProfessionalCertificateFileName = "";
	professionalCardFileName = "";
	professionalCardBase64 = "";
	//If has a job asociate
	if(!isNull(attachmentsList))
	{
		attachmentsList = attachmentsList.getJSON("Attachments").getJSON("row");
		hasMultiplesOpeningsAttachments = !isNull(attachmentsList.get(0));
		if(hasMultiplesOpeningsAttachments)
		{
			//When has a multiples Attachments				
			for each  attachtment in attachmentsList
			{
				fileName = "";
				category = "";
				attachtmentId = "";
				recordsFL = attachtment.getJSON("FL");
				//Getting the fields of the record
				for each  record in recordsFL
				{
					val = record.getJson('val');
					if(val == "File Name")
					{
						fileName = record.getJson('content');
					}
					if(val == "Category")
					{
						category = record.getJson('content');
					}
					if(val == "id")
					{
						attachtmentId = record.getJson('content');
					}
				}
				//START: REQUESTINH THE FILES
				pdfLink = "https://recruit.zoho.com/recruit/private/json/Candidates/downloadFile?scope=recruitapi&id=" + attachtmentId + "&version=2";
				header_data = Map();
				header_data.put("Content-Type","application/pdf");
				header_data.put("Content-Disposition",'inline; filename="' + fileName + '"');
				fileResponse = Map();
				//fileResponse = getUrl(pdfLink,header_data);
				fileResponse = invokeurl
				[
					url :pdfLink
					type :GET
					headers:header_data
					connection:"oauthzrecruit"
				];
				//END: REQUESTINH THE FILES
				// Encode the file content
				base64EncodeResponse = fileName + "|||" + zoho.encryption.base64Encode(fileResponse);
				if(category == "Documento de identidad")
				{
					indentityNumberBase64 = base64EncodeResponse;
					indentityNumberFileName = fileName;
				}
				if(category == "Acuerdo de firma electrónica")
				{
					electronicSignatureBase64 = base64EncodeResponse;
					electronicSignatureFileName = fileName;
				}
				if(category == "Diploma último nivel educativo culminado")
				{
					diplomaBase64 = base64EncodeResponse;
					diplomaFileName = fileName;
				}
				if(category == "Cursos- certificaciones- diplomados y otros")
				{
					studyCertificationsBase64 = base64EncodeResponse;
					studyCertificationsFileName = fileName;
				}
				if(category == "Consulta antecedentes disciplinarios")
				{
					disciplinaryHistoryBase64 = base64EncodeResponse;
					disciplinaryHistoryFileName = fileName;
				}
				if(category == "Consulta de antecedentes judiciales")
				{
					judicialBackgroundBase64 = base64EncodeResponse;
					judicialBackgroundFileName = fileName;
				}
				if(category == "Certificado de Seguridad social - ADRES")
				{
					socialSecurityBase64 = base64EncodeResponse;
					socialSecurityFileName = fileName;
				}
				if(category == "Certificación laboral 1")
				{
					workCertificationBase64 = base64EncodeResponse;
					workCertificationFileName = fileName;
				}
				if(category == "Certificación laboral 2")
				{
					workCertification2Base64 = base64EncodeResponse;
					workCertification2FileName = fileName;
				}
				if(category == "Formación académica")
				{
					academicFormationBase64 = base64EncodeResponse;
					academicFormationFilename = fileName;
				}
				//Courses- certifications- diplomas and others
				if(category == "Carné de vacunas")
				{
					vaccineCardBase64 = base64EncodeResponse;
					vaccineCardFileName = fileName;
				}
				if(category == "Certificación operación de grúas")
				{
					craneOperatorCertificationBase64 = base64EncodeResponse;
					craneOperatorCertificationFileName = fileName;
				}
				if(category == "Certificaciones operadores de montacarga y/o pantógrafo")
				{
					forkliftOperatorCertificationsBase64 = base64EncodeResponse;
					forkliftOperatorCertificationsFileName = fileName;
				}
				if(category == "Certificado de manipulación de alimentos")
				{
					foodHandlingCertificateBase64 = base64EncodeResponse;
					foodHandlingCertificateFileName = fileName;
				}
				if(category == "Certificado de trabajo en alturas")
				{
					workCertificateAtHeightsBase64 = base64EncodeResponse;
					workCertificateAtHeightsFileName = fileName;
				}
				if(category == "Curso de seguridad vial y tráfico")
				{
					roadTrafficCourseBase64 = base64EncodeResponse;
					roadTrafficCourseFileName = fileName;
				}
				if(category == "Licencia de conducción")
				{
					drivingLicenseBase64 = base64EncodeResponse;
					drivingLicenseFileName = fileName;
				}
				if(category == "Revisión técnico mecánica")
				{
					MechanicalTechnicalReviewBase64 = base64EncodeResponse;
					MechanicalTechnicalReviewFileName = fileName;
				}
				if(category == "SOAT")
				{
					soatBase64 = base64EncodeResponse;
					soatFileName = fileName;
				}
				if(category == "Tarjeta de propiedad de vehículo")
				{
					vehicleOwnershipCardBase64 = base64EncodeResponse;
					vehicleOwnershipCardFileName = fileName;
				}
				//Academic training
				if(category == "Certificado de estudios")
				{
					certificateOfStudiesFileName = fileName;
					certificateOfStudiesBase64 = base64EncodeResponse;
				}
				if(category == "Diploma/acta de bachiller")
				{
					highSchoolDiplomaFileName = fileName;
					highSchoolDiplomaBase64 = base64EncodeResponse;
				}
				if(category == "Diploma/acta de educación técnica")
				{
					diplomaTechnicalEducationFileName = fileName;
					diplomaTechnicalEducationBase64 = base64EncodeResponse;
				}
				if(category == "Diploma/acta de educación tecnología")
				{
					technologyEducationDiplomaFileName = fileName;
					technologyEducationDiplomaBase64 = base64EncodeResponse;
				}
				if(category == "Diploma/acta de posgrado")
				{
					graduateDiplomaFileName = fileName;
					graduateDiplomaBase64 = base64EncodeResponse;
				}
				if(category == "Diploma/acta profesional")
				{
					diplomaProfessionalCertificateBase64 = base64EncodeResponse;
					diplomaProfessionalCertificateFileName = fileName;
				}
				if(category == "Tarjeta profesional")
				{
					professionalCardFileName = fileName;
					professionalCardBase64 = base64EncodeResponse;
				}
				//END: REQUESTINH THE FILES
			}
			//When has only one Attachment
		}
		else
		{
			fileName = "";
			category = "";
			attachtmentId = "";
			recordsFL = attachmentsList.getJSON("FL");
			//Getting the fields of the record
			for each  record in recordsFL
			{
				val = record.getJson('val');
				if(val == "File Name")
				{
					fileName = record.getJson('content');
				}
				if(val == "Category")
				{
					category = record.getJson('content');
				}
				if(val == "id")
				{
					attachtmentId = record.getJson('content');
				}
			}
			//START: REQUESTINH THE FILES
			pdfLink = "https://recruit.zoho.com/recruit/private/json/Candidates/downloadFile?scope=recruitapi&id=" + attachtmentId + "&version=2";
			header_data = Map();
			header_data.put("Content-Type","application/pdf");
			header_data.put("Content-Disposition",'inline; filename="' + fileName + '"');
			fileResponse = Map();
			//fileResponse = getUrl(pdfLink,header_data);
			fileResponse = invokeurl
			[
				url :pdfLink
				type :GET
				headers:header_data
				connection:"oauthzrecruit"
			];
			//END: REQUESTINH THE FILES
			// Encode the file content
			base64EncodeResponse = fileName + "|||" + zoho.encryption.base64Encode(fileResponse);
			if(category == "Documento de identidad")
			{
				indentityNumberBase64 = base64EncodeResponse;
				indentityNumberFileName = fileName;
			}
			if(category == "Acuerdo de firma electrónica")
			{
				electronicSignatureBase64 = base64EncodeResponse;
				electronicSignatureFileName = fileName;
			}
			if(category == "Diploma último nivel educativo culminado")
			{
				diplomaBase64 = base64EncodeResponse;
				diplomaFileName = fileName;
			}
			if(category == "Cursos- certificaciones- diplomados y otros")
			{
				studyCertificationsBase64 = base64EncodeResponse;
				studyCertificationsFileName = fileName;
			}
			if(category == "Consulta antecedentes disciplinarios")
			{
				disciplinaryHistoryBase64 = base64EncodeResponse;
				disciplinaryHistoryFileName = fileName;
			}
			if(category == "Consulta de antecedentes judiciales")
			{
				judicialBackgroundBase64 = base64EncodeResponse;
				judicialBackgroundFileName = fileName;
			}
			if(category == "Certificado de Seguridad social - ADRES")
			{
				socialSecurityBase64 = base64EncodeResponse;
				socialSecurityFileName = fileName;
			}
			if(category == "Certificación laboral 1")
			{
				workCertificationBase64 = base64EncodeResponse;
				workCertificationFileName = fileName;
			}
			if(category == "Certificación laboral 2")
			{
				workCertification2Base64 = base64EncodeResponse;
				workCertification2FileName = fileName;
			}
			//Courses- certifications- diplomas and others
			if(category == "Carné de vacunas")
			{
				vaccineCardBase64 = base64EncodeResponse;
				vaccineCardFileName = fileName;
			}
			if(category == "Certificación operación de grúas")
			{
				craneOperatorCertificationBase64 = base64EncodeResponse;
				craneOperatorCertificationFileName = fileName;
			}
			if(category == "Certificaciones operadores de montacarga y/o pantógrafo")
			{
				forkliftOperatorCertificationsBase64 = base64EncodeResponse;
				forkliftOperatorCertificationsFileName = fileName;
			}
			if(category == "Certificado de manipulación de alimentos")
			{
				foodHandlingCertificateBase64 = base64EncodeResponse;
				foodHandlingCertificateFileName = fileName;
			}
			if(category == "Certificado de trabajo en alturas")
			{
				workCertificateAtHeightsBase64 = base64EncodeResponse;
				workCertificateAtHeightsFileName = fileName;
			}
			if(category == "Curso de seguridad vial y tráfico")
			{
				roadTrafficCourseBase64 = base64EncodeResponse;
				roadTrafficCourseFileName = fileName;
			}
			if(category == "Licencia de conducción")
			{
				drivingLicenseBase64 = base64EncodeResponse;
				drivingLicenseFileName = fileName;
			}
			if(category == "Revisión técnico mecánica")
			{
				MechanicalTechnicalReviewBase64 = base64EncodeResponse;
				MechanicalTechnicalReviewFileName = fileName;
			}
			if(category == "SOAT")
			{
				soatBase64 = base64EncodeResponse;
				soatFileName = fileName;
			}
			if(category == "Tarjeta de propiedad de vehículo")
			{
				vehicleOwnershipCardBase64 = base64EncodeResponse;
				vehicleOwnershipCardFileName = fileName;
			}
			//Academic training
			if(category == "Certificado de estudios")
			{
				certificateOfStudiesFileName = fileName;
				certificateOfStudiesBase64 = base64EncodeResponse;
			}
			if(category == "Diploma/acta de bachiller")
			{
				highSchoolDiplomaFileName = fileName;
				highSchoolDiplomaBase64 = base64EncodeResponse;
			}
			if(category == "Diploma/acta de educación técnica")
			{
				diplomaTechnicalEducationFileName = fileName;
				diplomaTechnicalEducationBase64 = base64EncodeResponse;
			}
			if(category == "Diploma/acta de educación tecnología")
			{
				technologyEducationDiplomaFileName = fileName;
				technologyEducationDiplomaBase64 = base64EncodeResponse;
			}
			if(category == "Diploma/acta de posgrado")
			{
				graduateDiplomaFileName = fileName;
				graduateDiplomaBase64 = base64EncodeResponse;
			}
			if(category == "Diploma/acta profesional")
			{
				diplomaProfessionalCertificateBase64 = base64EncodeResponse;
				diplomaProfessionalCertificateFileName = fileName;
			}
			if(category == "Tarjeta profesional")
			{
				professionalCardFileName = fileName;
				professionalCardBase64 = base64EncodeResponse;
			}
			//END: REQUESTINH THE FILES
		}
	}
	//START: BUILDING BASE64 OBJECTS
	indentityNumberObj = Map();
	indentityNumberObj.put("Id","16");
	indentityNumberObj.put("Value",indentityNumberBase64);
	electronicSignatureObj = Map();
	electronicSignatureObj.put("Id","101");
	electronicSignatureObj.put("Value",electronicSignatureBase64);
	diplomaObj = Map();
	diplomaObj.put("Id","17");
	diplomaObj.put("Value",diplomaBase64);
	disciplinaryHistoryObj = Map();
	disciplinaryHistoryObj.put("Id","21");
	disciplinaryHistoryObj.put("Value",disciplinaryHistoryBase64);
	judicialBackgroundObj = Map();
	judicialBackgroundObj.put("Id","22");
	judicialBackgroundObj.put("Value",judicialBackgroundBase64);
	socialSecurityObj = Map();
	socialSecurityObj.put("Id","152");
	socialSecurityObj.put("Value",socialSecurityBase64);
	workCertificationObj = Map();
	workCertificationObj.put("Id","182");
	workCertificationObj.put("Value",workCertificationBase64);
	workCertification2Obj = Map();
	workCertification2Obj.put("Id","182");
	workCertification2Obj.put("Value",workCertification2Base64);
	//Build Object for Courses- certifications- diplomas and others
	forkliftOperatorCertificationsObj = Map();
	forkliftOperatorCertificationsObj.put("Id","18");
	forkliftOperatorCertificationsObj.put("Value",forkliftOperatorCertificationsBase64);
	vaccineCardObj = Map();
	vaccineCardObj.put("Id","18");
	vaccineCardObj.put("Value",vaccineCardBase64);
	craneOperatorCertificationObj = Map();
	craneOperatorCertificationObj.put("Id","18");
	craneOperatorCertificationObj.put("Value",craneOperatorCertificationBase64);
	foodHandlingCertificateObj = Map();
	foodHandlingCertificateObj.put("Id","18");
	foodHandlingCertificateObj.put("Value",foodHandlingCertificateBase64);
	workCertificateAtHeightsObj = Map();
	workCertificateAtHeightsObj.put("Id","18");
	workCertificateAtHeightsObj.put("Value",workCertificateAtHeightsBase64);
	roadTrafficCourseObj = Map();
	roadTrafficCourseObj.put("Id","18");
	roadTrafficCourseObj.put("Value",roadTrafficCourseBase64);
	drivingLicenseObj = Map();
	drivingLicenseObj.put("Id","18");
	drivingLicenseObj.put("Value",drivingLicenseBase64);
	MechanicalTechnicalReviewObj = Map();
	MechanicalTechnicalReviewObj.put("Id","18");
	MechanicalTechnicalReviewObj.put("Value",MechanicalTechnicalReviewBase64);
	vehicleOwnershipCardObj = Map();
	vehicleOwnershipCardObj.put("Id","18");
	vehicleOwnershipCardObj.put("Value",vehicleOwnershipCardBase64);
	soatObj = Map();
	soatObj.put("Id","18");
	soatObj.put("Value",soatBase64);
	//Build Object for Academic training
	certificateOfStudiesObj = Map();
	certificateOfStudiesObj.put("Id","120");
	certificateOfStudiesObj.put("Value",certificateOfStudiesBase64);
	highSchoolDiplomaObj = Map();
	highSchoolDiplomaObj.put("Id","120");
	highSchoolDiplomaObj.put("Value",highSchoolDiplomaBase64);
	diplomaTechnicalEducationObj = Map();
	diplomaTechnicalEducationObj.put("Id","120");
	diplomaTechnicalEducationObj.put("Value",diplomaTechnicalEducationBase64);
	technologyEducationDiplomaObj = Map();
	technologyEducationDiplomaObj.put("Id","120");
	technologyEducationDiplomaObj.put("Value",technologyEducationDiplomaBase64);
	graduateDiplomaObj = Map();
	graduateDiplomaObj.put("Id","120");
	graduateDiplomaObj.put("Value",graduateDiplomaBase64);
	diplomaProfessionalCertificateObj = Map();
	diplomaProfessionalCertificateObj.put("Id","120");
	diplomaProfessionalCertificateObj.put("Value",diplomaProfessionalCertificateBase64);
	professionalCardObj = Map();
	professionalCardObj.put("Id","120");
	professionalCardObj.put("Value",professionalCardBase64);
	//END: BUILDING BASE64 OBJECTS
	/***-----START: GET ATTACHMENTS-----***/
	/*-----START: BUILD DATA TO SEND----*/
	elementInfo = Map();
	elementInfo.put("ETId",2);
	elementInfo.put("ReplaceableMetaDataIds",{1,84,6,8,5,10,11,12,15,13,16,101,27,17,120,18,21,22,152,182});
	elementInfo.put("KeyMetaDataId",83);
	elementInfo.put("Values",{idxVinculacionObj,companyNameObj,requisicionObj,jobTitleObj,dateOfAdmissionObj,zoneObj,firtsNameObj,lastNameObj,candidateDocumentObj,mobileObj,emailObj,indentityNumberObj,electronicSignatureObj,maxLevelStudyObj,diplomaObj,disciplinaryHistoryObj,judicialBackgroundObj,socialSecurityObj,workCertificationObj,workCertification2Obj,forkliftOperatorCertificationsObj,vaccineCardObj,craneOperatorCertificationObj,foodHandlingCertificateObj,workCertificateAtHeightsObj,roadTrafficCourseObj,drivingLicenseObj,MechanicalTechnicalReviewObj,vehicleOwnershipCardObj,soatObj,certificateOfStudiesObj,highSchoolDiplomaObj,diplomaTechnicalEducationObj,technologyEducationDiplomaObj,graduateDiplomaObj,diplomaProfessionalCertificateObj,professionalCardObj});
	body = Map();
	body.put("ElementInfo",elementInfo);
	params = Map();
	params.put('IdDocManager',"CONTRATACION_DIGITAL");
	params.put('Transitions',{45,7});
	params.put('Body',body);
	/*-----END: BUILD DATA TO SEND----*/
	/*-----START: SEND REQUEST----*/
	headers = Map();
	candidateDocMngrResponse = Map();
	headers.put("Content-Type","application/json");
	headers.put("Authorization","Bearer " + token);
	//candidateDocMngrResponse = postUrl(uriDocManager,params.toString(),headers,false);
	velaioLog = invokeurl
	[
		url :"https://velaio.com/eficacia/?candId=" + candidateId + "&jobId=" + jobId
		type :POST
		parameters:params.toString()
		headers:headers
		detailed:true
	];
	info velaioLog;
	candidateDocMngrResponse = invokeurl
	[
		url :uriDocManager
		type :POST
		parameters:params.toString()
		headers:headers
		detailed:true
	];
	info candidateDocMngrResponse;
	// FIN DE EJECUCIÓN DOC MANAGER ========================
	endExecutionTime = now;
	executionTime = startExecutionTime.timeBetween(endExecutionTime);
	/*-----END: SEND REQUEST----*/
	/*-----START: LOG RESPONSE----*/
	responseText = candidateDocMngrResponse.getJson("responseText");
	responseText = responseText.toString();
	responseCode = candidateDocMngrResponse.getJson("responseCode");
	if(log == "1")
	{
		//START: BUILDING BASE64 OBJECTS
		indentityNumberObj = Map();
		indentityNumberObj.put("Id","16");
		indentityNumberObj.put("Value",indentityNumberFileName);
		electronicSignatureObj = Map();
		electronicSignatureObj.put("Id","101");
		electronicSignatureObj.put("Value",electronicSignatureFileName);
		diplomaObj = Map();
		diplomaObj.put("Id","17");
		diplomaObj.put("Value",diplomaFileName);
		disciplinaryHistoryObj = Map();
		disciplinaryHistoryObj.put("Id","21");
		disciplinaryHistoryObj.put("Value",disciplinaryHistoryFileName);
		judicialBackgroundObj = Map();
		judicialBackgroundObj.put("Id","22");
		judicialBackgroundObj.put("Value",judicialBackgroundFileName);
		socialSecurityObj = Map();
		socialSecurityObj.put("Id","152");
		socialSecurityObj.put("Value",socialSecurityFileName);
		workCertificationObj = Map();
		workCertificationObj.put("Id","182");
		workCertificationObj.put("Value",workCertificationFileName);
		workCertification2Obj = Map();
		workCertification2Obj.put("Id","182");
		workCertification2Obj.put("Value",workCertification2FileName);
		//Build Object for Courses- certifications- diplomas and others
		forkliftOperatorCertificationsObj = Map();
		forkliftOperatorCertificationsObj.put("Id","18");
		forkliftOperatorCertificationsObj.put("Value",forkliftOperatorCertificationsFileName);
		vaccineCardObj = Map();
		vaccineCardObj.put("Id","18");
		vaccineCardObj.put("Value",vaccineCardFileName);
		craneOperatorCertificationObj = Map();
		craneOperatorCertificationObj.put("Id","18");
		craneOperatorCertificationObj.put("Value",craneOperatorCertificationFileName);
		foodHandlingCertificateObj = Map();
		foodHandlingCertificateObj.put("Id","18");
		foodHandlingCertificateObj.put("Value",foodHandlingCertificateFileName);
		workCertificateAtHeightsObj = Map();
		workCertificateAtHeightsObj.put("Id","18");
		workCertificateAtHeightsObj.put("Value",workCertificateAtHeightsFileName);
		roadTrafficCourseObj = Map();
		roadTrafficCourseObj.put("Id","18");
		roadTrafficCourseObj.put("Value",roadTrafficCourseFileName);
		drivingLicenseObj = Map();
		drivingLicenseObj.put("Id","18");
		drivingLicenseObj.put("Value",drivingLicenseFileName);
		MechanicalTechnicalReviewObj = Map();
		MechanicalTechnicalReviewObj.put("Id","18");
		MechanicalTechnicalReviewObj.put("Value",MechanicalTechnicalReviewFileName);
		vehicleOwnershipCardObj = Map();
		vehicleOwnershipCardObj.put("Id","18");
		vehicleOwnershipCardObj.put("Value",vehicleOwnershipCardFileName);
		soatObj = Map();
		soatObj.put("Id","18");
		soatObj.put("Value",soatFileName);
		//Build Object for Academic training
		certificateOfStudiesObj = Map();
		certificateOfStudiesObj.put("Id","120");
		certificateOfStudiesObj.put("Value",certificateOfStudiesFileName);
		highSchoolDiplomaObj = Map();
		highSchoolDiplomaObj.put("Id","120");
		highSchoolDiplomaObj.put("Value",highSchoolDiplomaFileName);
		diplomaTechnicalEducationObj = Map();
		diplomaTechnicalEducationObj.put("Id","120");
		diplomaTechnicalEducationObj.put("Value",diplomaTechnicalEducationFileName);
		technologyEducationDiplomaObj = Map();
		technologyEducationDiplomaObj.put("Id","120");
		technologyEducationDiplomaObj.put("Value",technologyEducationDiplomaFileName);
		graduateDiplomaObj = Map();
		graduateDiplomaObj.put("Id","120");
		graduateDiplomaObj.put("Value",graduateDiplomaFileName);
		diplomaProfessionalCertificateObj = Map();
		diplomaProfessionalCertificateObj.put("Id","120");
		diplomaProfessionalCertificateObj.put("Value",diplomaProfessionalCertificateFileName);
		professionalCardObj = Map();
		professionalCardObj.put("Id","120");
		professionalCardObj.put("Value",professionalCardFileName);
		//END: BUILDING BASE64 OBJECTS
		/***-----START: GET ATTACHMENTS-----***/
		/*-----START: BUILD DATA TO SEND----*/
		elementInfo = Map();
		elementInfo.put("ETId",2);
		elementInfo.put("ReplaceableMetaDataIds",{1,84,6,8,5,10,11,12,15,13,16,101,27,17,120,18,21,22,152,182});
		elementInfo.put("KeyMetaDataId",83);
		elementInfo.put("Values",{idxVinculacionObj,companyNameObj,requisicionObj,jobTitleObj,dateOfAdmissionObj,zoneObj,firtsNameObj,lastNameObj,candidateDocumentObj,mobileObj,emailObj,indentityNumberObj,electronicSignatureObj,maxLevelStudyObj,diplomaObj,disciplinaryHistoryObj,judicialBackgroundObj,socialSecurityObj,workCertificationObj,workCertification2Obj,forkliftOperatorCertificationsObj,vaccineCardObj,craneOperatorCertificationObj,foodHandlingCertificateObj,workCertificateAtHeightsObj,roadTrafficCourseObj,drivingLicenseObj,MechanicalTechnicalReviewObj,vehicleOwnershipCardObj,soatObj,certificateOfStudiesObj,highSchoolDiplomaObj,diplomaTechnicalEducationObj,technologyEducationDiplomaObj,graduateDiplomaObj,diplomaProfessionalCertificateObj,professionalCardObj});
		body = Map();
		body.put("ElementInfo",elementInfo);
		params = Map();
		params.put('IdDocManager',"CONTRATACION_DIGITAL");
		params.put('Transitions',{45,7});
		params.put('Body',body);
		/*-----END: BUILD DATA TO SEND----*/
		xmlData = 'xmlData=<CustomModule6><row no="1"><FL val="Cod">' + responseCode + '</FL><FL val="Response">' + responseText + '</FL><FL val="Msg"><![CDATA[Doc Manager Create Candidate]]></FL><FL val="Integration"><![CDATA[Doc Manager]]></FL><FL val="Method"><![CDATA[' + uriDocManager.toString() + ']]></FL><FL val="Params">' + params.toString() + '</FL><FL val="Inicio de ejecución">' + startExecutionTime + '</FL><FL val="Fin de ejecución">' + endExecutionTime + '</FL><FL val="Tiempo de ejecución">' + executionTime + '</FL></row></CustomModule6>';
		headers = Map();
		headers.put("content-type","application/x-www-form-urlencoded");
		logResponse = Map();
		//logResponse = postUrl(uriLog,xmlData,headers,false);
		logResponse = invokeurl
		[
			url :uriLog
			type :POST
			parameters:xmlData
			headers:headers
			connection:"oauthzrecruit"
		];
	}
	/*-----END: LOG RESPONSE----*/
	/*-----START: LOG PROCESSED CANDIDATES ----*/
	IdDocmanager = candidateDocMngrResponse.getJson("responseText").toString();
	xmlData = 'xmlData=<CustomModule14><row no="1"><FL val="Oferta_ID"><![CDATA[' + jobId.toString() + ']]></FL><FL val="Cliente_ID"><![CDATA[' + clientId.toString() + ']]></FL><FL val="Candidato_ID"><![CDATA[' + candidateId.toString() + ']]></FL><FL val="Llave de búsqueda"><![CDATA[' + jobId.toString() + '+' + jobId.toString() + ']]></FL><FL val="Tipo"><![CDATA[DocManager]]></FL><FL val="Id docmanager"><![CDATA[' + candidateId.toString() + ']]></FL><FL val="Id requisicion"><![CDATA[' + idRequisicion.toString() + ']]></FL><FL val="Id requisicion docmanager"><![CDATA[' + idRequisicionInDocManager.toString() + ']]></FL></row></CustomModule14>';
	headers = Map();
	headers.put("content-type","application/x-www-form-urlencoded");
	logResponse = Map();
	//logResponse = postUrl(uriProcessedCandidates,xmlData,headers,false);
	logResponse = invokeurl
	[
		url :uriProcessedCandidates
		type :POST
		parameters:xmlData
		headers:headers
		connection:"oauthzrecruit"
	];
	/*-----END: LOG PROCESSED CANDIDATES----*/
}
 catch (e)
{	info e.toString();
	endExecutionTime = now;
	executionTime = startExecutionTime.timeBetween(endExecutionTime);
	xmlData = 'xmlData=<CustomModule6><row no="1"><FL val="Cod"></FL><FL val="Response">' + e.toString() + '</FL><FL val="Msg"><![CDATA[Doc Manager Create Candidate]]></FL><FL val="Integration"><![CDATA[Doc Manager]]></FL><FL val="Method"><![CDATA[https://wsintegracion.azurewebsites.net/webservice/DocManager/storeFully]]></FL><FL val="Params"></FL>><FL val="Nota">![CDATA[Candidato doc: ' + candidateDocument + ']]</FL><FL val="Inicio de ejecución">' + startExecutionTime + '</FL><FL val="Fin de ejecución">' + endExecutionTime + '</FL><FL val="Tiempo de ejecución">' + executionTime + '</FL><FL val="Crashed">TRUE</FL></row></CustomModule6>';
	headers = Map();
	headers.put("content-type","application/x-www-form-urlencoded");
	logResponse = Map();
	//logResponse = postUrl(uriLog,xmlData,headers,false);
	logResponse = invokeurl
	[
		url :uriLog
		type :POST
		parameters:xmlData
		headers:headers
		connection:"oauthzrecruit"
	];
}