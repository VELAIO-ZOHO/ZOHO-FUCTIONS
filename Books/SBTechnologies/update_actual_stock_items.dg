
/**
 * Recorre los items relacionados del Sale Order entrante (en adelante: SO).
 * Para cada item relaciondo, realiza una búsqueda de todos los SO en estado 'draft'
 * Recorre todos los SO - Draft, si encuentra que el item relacionado también se encuentra en otros
 * realiza una sumatoria de todos y los guarda en la variable 'quantitysInAllDrafts'.
 * 
 * Una vez terminado el recorrido de todos los SO - Draft actualiza el campo 'Stock in Draft' del item.
 * Al actualizar este item, obtenemos de regreso el valor actualizado del 'Available for Sale' & 'Committed Stock'
 * y estos valores los copiamos al los campos custom con los mismos nombres.
 *
 * Desarrollado por: velaio.com
 */
timeStart = now;
timeEnd = 0;
totalTime = 0;
try 
{
	salesorderID = salesorder.get("salesorder_id");
	organizationID = organization.get("organization_id");
	// salesorderID = "2268646000014384452" // For test purpose only;
	// Búsqueda del SO entrante (ByID nos trae todos los datos)
	entrySaleOrder = zoho.books.getRecordsByID("salesorders",organizationID,salesorderID,"zbooks_cnn");
	entrySaleOrderItems = entrySaleOrder.get("salesorder").get("line_items");
	// Recorremos los items del SO entrante
	for each  item in entrySaleOrderItems
	{
		itemId = item.get("item_id");
		quantitySaled = item.get("quantity");
		quantitysInAllDrafts = 0;
		// Búsqueda de todos los SO - Draft
		allSalesOrdersDrafts = zoho.books.getRecords("salesorders",organizationID,{'status':'draft'},"zbooks_cnn");
		salesOrdersDrafts = allSalesOrdersDrafts.get("salesorders");
		// Recorremos todos los SO - Draft
		for each  saleOrderDraftResume in salesOrdersDrafts
		{
			saleOrderId = saleOrderDraftResume.get("salesorder_id");
			saleOrderDraftById = zoho.books.getRecordsByID("salesorders",organizationID,saleOrderId,"zbooks_cnn");
			itemsInDraft = saleOrderDraftById.get("salesorder").get("line_items");
			// Recorremos todos los items de los SO - Draft
			for each  item_2 in itemsInDraft
			{
				itemId_2 = item_2.get("item_id");
				itemQuantity_2 = item_2.get("quantity");
				// si contiene el mismo item del SO entrante suma la cant. al total
				if(itemId_2 == itemId)
				{
					quantitysInAllDrafts = quantitysInAllDrafts + itemQuantity_2;
				}
			}
		}
		// actualiza el campo Stock in Draft del item
		updateField_1 = {'custom_fields':{{'label':'Stock in Draft','value':quantitysInAllDrafts}}};
		itemUpdatedDraft = zoho.books.updateRecord("items",organizationID,itemId,updateField_1,"zbooks_cnn");
		stockOnHand = itemUpdatedDraft.get("item").get("actual_available_stock");
		availableSaleStock = itemUpdatedDraft.get("item").get("actual_available_for_sale_stock");
		availableCommStock = itemUpdatedDraft.get("item").get("actual_committed_stock");
		// actualiza el campo Available for Sale & Committed Stock  del item
		updateField_2 = {'custom_fields':{{'label':'Available for Sale','value':availableSaleStock - quantitysInAllDrafts},{'label':'Committed Stock','value':availableCommStock},{'label':'Stock on Hand','value':stockOnHand}}};
		itemUpdatedStocks = zoho.books.updateRecord("items",organizationID,itemId,updateField_2,"zbooks_cnn");
		// Log
		info "All Stock in Draft: " + quantitysInAllDrafts;
		info "Available for Sale: " + availableSaleStock;
		info "Committed Stock: " + availableCommStock;
		info itemUpdatedStocks;
	}
	timeEnd = now;
	totalTime = timeStart.timeBetween(timeEnd);
	info "Inicio ejecución: " + timeStart;
	info "Fin ejecución: " + timeEnd;
	info "Tiempo: " + totalTime;
}
 catch (e)
{	info "¡Error al ejecutar la función!";
	info "SO: " + salesorderID;
	info e.toString();
	timeEnd = now;
	totalTime = timeStart.timeBetween(timeEnd);
	info "Inicio ejecución: " + timeStart;
	info "Fin ejecución: " + timeEnd;
	info "Tiempo: " + totalTime;
}
