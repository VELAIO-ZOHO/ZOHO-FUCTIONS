list check_realtime_pending_stock(string salesorder_id, string organization_id)
{
  /**
    * Recorre los items relacionados del Sale Order entrante (en adelante: SO).
    * Para cada item relaciondo, realiza una búsqueda de todos los SO en estado "pending_approval"
    * Recorre todos los SO, si encuentra que el item relacionado también se encuentra en otros
    * realiza una sumatoria de todos y los guarda en la variable "qtys_all_so_pending".
    * 
    * Una vez terminado el recorrido retorna una lista con los items y su pending stock.
    * Requeridos para la validación de items en la función [check_salesorder_items]
    *
    * Desarrollado por: velaio.com
    */
  api_calls = 0;
  items_evaluated = List();
  // Búsqueda del SO entrante (ByID nos trae todos los datos)
  initial_salesorder = zoho.books.getRecordsByID("salesorders",organization_id,salesorder_id,"zoho_books").get("salesorder");
  //info initial_salesorder;
  api_calls = api_calls + 1;
  initial_so_items = initial_salesorder.get("line_items");
  initial_so_number = initial_salesorder.get("salesorder_number");
  // Recorremos los items del SO entrante
  info "Items found in Sales Order [" + initial_so_number + "]: " + initial_so_items.size();
  info "--------------------------------";
  for each  item in initial_so_items
  {
    salesorder_associated = Collection();
    qtys_all_so_pending = 0;
    initial_item_id = item.get("item_id");
    initial_item_name = item.get("name");
    initial_item_qty = item.get("quantity");
    // Búsqueda de todos los SO - Draft
    searched_pending_so = zoho.books.getRecords("salesorders",organization_id,{"status":"pending_approval"},"zoho_books").get("salesorders");
    api_calls = api_calls + 1;
    // Recorremos todos los SO - Draft
    for each  searched_so in searched_pending_so
    {
      searched_so_id = searched_so.get("salesorder_id");
      searched_so_by_id = zoho.books.getRecordsByID("salesorders",organization_id,searched_so_id,"zoho_books").get("salesorder");
      api_calls = api_calls + 1;
      searched_so_items = searched_so_by_id.get("line_items");
      // Calculamos el Pending Stock en otras SO
      if(searched_so_id != salesorder_id)
      {
        // Recorremos todos los items de los SO - pending_approval
        for each  searched_so_item in searched_so_items
        {
          searched_item_id = searched_so_item.get("item_id");
          searched_item_qty = searched_so_item.get("quantity");
          // si contiene el mismo item del SO entrante suma la cant. al total
          if(searched_item_id == initial_item_id)
          {
            salesorder_associated.insert(searched_so_id);
            qtys_all_so_pending = qtys_all_so_pending + searched_item_qty;
          }
        }
      }
    }
    // Agregamos item con su pending stock a listado
    items_evaluated.add({
      "item_name":initial_item_name,
      "item_id":initial_item_id,
      "pending_stock":qtys_all_so_pending,
      "so_pending_associated":salesorder_associated
    });
    if(initial_so_items.size() > 1)
    {
      info "------------------ Next item --------------------";
    }
  }
  info "End of execution!";
  info "API CALLS: " + api_calls;
  return items_evaluated;
}